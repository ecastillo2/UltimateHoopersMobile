@model Web.Models.ResetPasswordModel
@{
    ViewData["Title"] = "Reset Password";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles {
    <style>
        .reset-password-container {
            min-height: 100vh;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 2rem 0;
        }

        .reset-password-card {
            background: white;
            border-radius: 1rem;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            max-width: 500px;
            width: 100%;
            margin: 1rem;
        }

        .card-header-gradient {
            background: linear-gradient(135deg, #342580 0%, #4a3b8a 100%);
            color: white;
            padding: 2rem;
            text-align: center;
        }

        .card-body-custom {
            padding: 2rem;
        }

        .form-control-custom {
            border: 2px solid #e1e5e9;
            border-radius: 0.5rem;
            padding: 0.75rem 1rem;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

            .form-control-custom:focus {
                border-color: #ff6238;
                box-shadow: 0 0 0 0.2rem rgba(255, 98, 56, 0.15);
                outline: none;
            }

            .form-control-custom.is-invalid {
                border-color: #dc3545;
            }

        .btn-custom {
            background: linear-gradient(135deg, #ff6238 0%, #ff7a50 100%);
            border: none;
            border-radius: 0.5rem;
            padding: 0.75rem 2rem;
            font-weight: 600;
            color: white;
            transition: all 0.3s ease;
            width: 100%;
            font-size: 1rem;
        }

            .btn-custom:hover {
                background: linear-gradient(135deg, #e55529 0%, #ff6238 100%);
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(255, 98, 56, 0.3);
                color: white;
            }

            .btn-custom:disabled {
                opacity: 0.7;
                cursor: not-allowed;
                transform: none;
            }

        .back-link {
            color: #6c757d;
            text-decoration: none;
            font-weight: 500;
            transition: all 0.3s ease;
        }

            .back-link:hover {
                color: #ff6238;
                text-decoration: none;
            }

        .icon-container {
            width: 80px;
            height: 80px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 1rem;
            font-size: 2rem;
        }

        .success-message {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
            padding: 1.5rem;
            border-radius: 0.5rem;
            text-align: center;
            margin-bottom: 1rem;
        }

        .error-message {
            background: linear-gradient(135deg, #dc3545 0%, #e74c3c 100%);
            color: white;
            padding: 1rem;
            border-radius: 0.5rem;
            text-align: center;
            margin-bottom: 1rem;
        }

        .password-strength {
            margin-top: 0.5rem;
            font-size: 0.875rem;
        }

        .strength-indicator {
            height: 4px;
            border-radius: 2px;
            margin-top: 0.25rem;
            transition: all 0.3s ease;
        }

        .strength-weak {
            background: #dc3545;
            width: 33%;
        }

        .strength-medium {
            background: #ffc107;
            width: 66%;
        }

        .strength-strong {
            background: #28a745;
            width: 100%;
        }

        .password-match-indicator {
            font-size: 0.875rem;
            margin-top: 0.5rem;
        }

        .password-match-success {
            color: #28a745;
        }

        .password-match-error {
            color: #dc3545;
        }

        @@media (max-width: 576px) {
            .reset-password-container

        {
            padding: 1rem 0;
        }

        .card-header-gradient,
        .card-body-custom {
            padding: 1.5rem;
        }

        }
    </style>
}

<div class="reset-password-container">
    <div class="reset-password-card">
        <div class="card-header-gradient">
            <div class="icon-container">
                <i class="bi bi-shield-lock"></i>
            </div>
            <h2 class="mb-0">Reset Password</h2>
            <p class="mb-0 opacity-75">Create a new password for your account</p>
        </div>

        <div class="card-body-custom">
            @if (TempData["Success"] != null)
            {
                <div class="success-message">
                    <i class="bi bi-check-circle me-2"></i>
                    @TempData["Success"]
                </div>
                <div class="text-center">
                    <a href="/" class="btn btn-custom">
                        <i class="bi bi-box-arrow-in-right me-2"></i>
                        Go to Login
                    </a>
                </div>
            }
            else if (TempData["Error"] != null)
            {
                <div class="error-message">
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    @TempData["Error"]
                </div>
                <div class="text-center">
                    <a href="/Account/ForgotPassword" class="btn btn-custom">
                        <i class="bi bi-arrow-clockwise me-2"></i>
                        Request New Reset Link
                    </a>
                </div>
            }
            else
            {
                <form asp-action="ResetPassword" method="post" id="resetPasswordForm">
                    @Html.AntiForgeryToken()
                    <input asp-for="Token" type="hidden" />
                    <input asp-for="Email" type="hidden" />

                    <div class="mb-4">
                        <label class="form-label fw-bold">Email Address</label>
                        <input type="email" class="form-control form-control-custom" value="@Model.Email" readonly>
                        <div class="form-text">
                            Resetting password for this account
                        </div>
                    </div>

                    <div class="mb-4">
                        <label asp-for="Password" class="form-label fw-bold">New Password</label>
                        <input asp-for="Password" class="form-control form-control-custom" type="password" id="passwordInput" placeholder="Enter your new password">
                        <span asp-validation-for="Password" class="text-danger"></span>

                        <div class="password-strength" id="passwordStrength" style="display: none;">
                            <div class="d-flex justify-content-between align-items-center">
                                <span id="strengthText">Password strength</span>
                                <div class="flex-grow-1 ms-3">
                                    <div class="strength-indicator" id="strengthBar"></div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="mb-4">
                        <label asp-for="ConfirmPassword" class="form-label fw-bold">Confirm New Password</label>
                        <input asp-for="ConfirmPassword" class="form-control form-control-custom" type="password" id="confirmPasswordInput" placeholder="Confirm your new password">
                        <span asp-validation-for="ConfirmPassword" class="text-danger"></span>

                        <div class="password-match-indicator" id="passwordMatch" style="display: none;"></div>
                    </div>

                    <div class="mb-4">
                        <button type="submit" class="btn btn-custom" id="submitBtn" disabled>
                            <span class="btn-text">Reset Password</span>
                            <span class="btn-loading" style="display: none;">
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                Resetting...
                            </span>
                        </button>
                    </div>

                    <div class="text-center">
                        <a href="/" class="back-link">
                            <i class="bi bi-arrow-left me-2"></i>
                            Back to Login
                        </a>
                    </div>
                </form>
            }
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('resetPasswordForm');
            const submitBtn = document.getElementById('submitBtn');
            const btnText = submitBtn?.querySelector('.btn-text');
            const btnLoading = submitBtn?.querySelector('.btn-loading');
            const passwordInput = document.getElementById('passwordInput');
            const confirmPasswordInput = document.getElementById('confirmPasswordInput');
            const passwordStrength = document.getElementById('passwordStrength');
            const strengthText = document.getElementById('strengthText');
            const strengthBar = document.getElementById('strengthBar');
            const passwordMatch = document.getElementById('passwordMatch');

            if (form && submitBtn) {
                form.addEventListener('submit', function(e) {
                    if (submitBtn.disabled) {
                        e.preventDefault();
                        return;
                    }

                    // Show loading state
                    submitBtn.disabled = true;
                    btnText.style.display = 'none';
                    btnLoading.style.display = 'inline-block';
                });
            }

            // Password strength checker
            if (passwordInput) {
                passwordInput.addEventListener('input', function() {
                    const password = this.value;

                    if (password.length > 0) {
                        passwordStrength.style.display = 'block';

                        const strength = calculatePasswordStrength(password);
                        updatePasswordStrength(strength);
                    } else {
                        passwordStrength.style.display = 'none';
                    }

                    checkFormValidity();
                });
            }

            // Password confirmation checker
            if (confirmPasswordInput) {
                confirmPasswordInput.addEventListener('input', function() {
                    const password = passwordInput.value;
                    const confirmPassword = this.value;

                    if (confirmPassword.length > 0) {
                        passwordMatch.style.display = 'block';

                        if (password === confirmPassword) {
                            passwordMatch.innerHTML = '<i class="bi bi-check-circle me-2"></i>Passwords match';
                            passwordMatch.className = 'password-match-indicator password-match-success';
                        } else {
                            passwordMatch.innerHTML = '<i class="bi bi-x-circle me-2"></i>Passwords do not match';
                            passwordMatch.className = 'password-match-indicator password-match-error';
                        }
                    } else {
                        passwordMatch.style.display = 'none';
                    }

                    checkFormValidity();
                });
            }

            function calculatePasswordStrength(password) {
                let score = 0;

                if (password.length >= 6) score++;
                if (password.length >= 8) score++;
                if (/[a-z]/.test(password)) score++;
                if (/[A-Z]/.test(password)) score++;
                if (/[0-9]/.test(password)) score++;
                if (/[^A-Za-z0-9]/.test(password)) score++;

                if (score < 3) return 'weak';
                if (score < 5) return 'medium';
                return 'strong';
            }

            function updatePasswordStrength(strength) {
                strengthBar.className = 'strength-indicator';

                switch (strength) {
                    case 'weak':
                        strengthText.textContent = 'Weak password';
                        strengthBar.classList.add('strength-weak');
                        break;
                    case 'medium':
                        strengthText.textContent = 'Medium password';
                        strengthBar.classList.add('strength-medium');
                        break;
                    case 'strong':
                        strengthText.textContent = 'Strong password';
                        strengthBar.classList.add('strength-strong');
                        break;
                }
            }

            function checkFormValidity() {
                const password = passwordInput?.value || '';
                const confirmPassword = confirmPasswordInput?.value || '';
                const passwordsMatch = password === confirmPassword;
                const passwordValid = password.length >= 6;

                if (submitBtn) {
                    submitBtn.disabled = !(passwordValid && passwordsMatch && password.length > 0);
                }
            }

            // Auto-focus password input
            if (passwordInput) {
                passwordInput.focus();
            }
        });
    </script>
}