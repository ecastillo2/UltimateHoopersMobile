@model Website.ViewModels.RunsViewModel

@{
    ViewData["Title"] = "Run Management";
    var userType = ViewData["UserType"]?.ToString() ?? "Coach";
}

@section Styles {
    <style>
        :root {
            --primary-color: #FF6B00;
            --secondary-color: #1C2C5B;
            --accent-color: #3BACB6;
            --light-color: #F8F9FA;
            --dark-color: #212529;
        }

        .dashboard-header {
            background: linear-gradient(135deg, var(--secondary-color) 0%, #0b1733 100%);
            color: white;
            padding: 2rem 0;
            margin-bottom: 2rem;
        }

        .run-card {
            border-radius: 15px;
            transition: all 0.3s ease;
            border: none;
            height: 100%;
        }

            .run-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
            }

        .run-banner {
            height: 120px;
            background-size: cover;
            background-position: center;
            border-top-left-radius: 15px;
            border-top-right-radius: 15px;
            position: relative;
        }

        .status-badge {
            border-radius: 20px;
            padding: 0.25rem 0.75rem;
            font-size: 0.75rem;
            font-weight: 600;
            position: absolute;
            top: 10px;
            right: 10px;
        }

        .run-time {
            position: absolute;
            bottom: 10px;
            left: 10px;
            background-color: rgba(0, 0, 0, 0.5);
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.75rem;
        }

        .run-host {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            margin-right: 1rem;
            background-color: var(--secondary-color);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            margin-top: -25px;
            margin-left: 15px;
            border: 3px solid white;
            position: relative;
            z-index: 10;
        }

        .search-box {
            border-radius: 50px;
            padding-left: 1rem;
            border: 1px solid #e9ecef;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        }

            .search-box:focus {
                box-shadow: 0 0 0 0.25rem rgba(255, 107, 0, 0.25);
                border-color: #FF6B00;
            }

        .search-btn {
            border-radius: 0 50px 50px 0;
            background-color: #FF6B00;
            color: white;
            border: none;
        }

        .filter-dropdown {
            border-radius: 50px;
            padding: 0.375rem 1rem;
        }

        .modal-content {
            border-radius: 15px;
            overflow: hidden;
        }

        .modal-header {
            background-color: var(--secondary-color);
            color: white;
            border-bottom: none;
        }

        .modal-footer {
            border-top: none;
        }

        .progress-sm {
            height: 6px;
            border-radius: 3px;
        }

        .court-image {
            width: 100%;
            height: 150px;
            object-fit: cover;
            border-radius: 10px;
            margin-bottom: 15px;
        }

        .date-picker, .time-picker {
            border-radius: 50px;
            border: 1px solid #e9ecef;
            padding: 0.375rem 1rem;
        }

        .participants-list {
            max-height: 200px;
            overflow-y: auto;
        }

        .back-button {
            margin-bottom: 20px;
        }

        .no-runs-message {
            text-align: center;
            padding: 3rem;
            background-color: #f8f9fa;
            border-radius: 15px;
            margin: 2rem 0;
        }
    </style>
}

<div class="dashboard-header">
    <div class="container">
        <h1>Run Management</h1>
        <p class="lead">Create and manage basketball runs, track participants, and schedule sessions</p>
    </div>
</div>

<div class="container">
    <!-- Back button to dashboard -->
    <div class="back-button">
        <a href="@Url.Action("Dashboard", "Dashboard")" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left me-2"></i>Back to Dashboard
        </a>
    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <form method="get" action="@Url.Action("Run", "Dashboard")">
                <input type="hidden" name="cursor" value="@Model.NextCursor" />
                <input type="hidden" name="direction" value="next" />
                <input type="hidden" name="limit" value="@Model.PageSize" />
                <input type="hidden" name="sortBy" value="@Model.CurrentSortBy" />

                <div class="input-group mb-3">
                    <input type="text" class="form-control search-box" name="searchTerm" placeholder="Search runs..." aria-label="Search runs" value="@Model.SearchTerm">
                    <button class="btn search-btn" type="submit">
                        <i class="bi bi-search"></i>
                    </button>
                </div>
            </form>
        </div>
        <div class="col-md-4">
            <select class="form-select filter-dropdown" id="runFilterDropdown">
                <option value="all" selected>All Runs</option>
                <option value="upcoming">Upcoming Runs</option>
                <option value="past">Past Runs</option>
                <option value="my">My Runs</option>
                <option value="full">Full Runs</option>
            </select>
        </div>
        <div class="col-md-2 text-end">
            <button type="button" class="btn btn-orange w-100" data-bs-toggle="modal" data-bs-target="#addRunModal">
                <i class="bi bi-plus-circle me-2"></i>Create Run
            </button>
        </div>
    </div>

    <!-- Run cards -->
    <div class="row g-4">
        @if (Model?.Runs != null && Model.Runs.Any())
        {
            foreach (var run in Model.Runs)
            {
                // Determine run status badge
                string badgeClass = "bg-success-subtle text-success";
                string badgeText = "Upcoming";

             @*    if (run.IsFull)
                {
                    badgeClass = "bg-danger-subtle text-danger";
                    badgeText = "Full";
                } *@
                 if (run.PlayerCount > 0 && run.PlayerLimit > 0 &&
                (float)run.PlayerCount / run.PlayerLimit >= 0.85)
                {
                    badgeClass = "bg-warning-subtle text-warning";
                    badgeText = "Almost Full";
                }
                else if (run.RunDate < DateTime.Now)
                {
                    badgeClass = "bg-secondary-subtle text-secondary";
                    badgeText = "Past";
                }

                // Calculate fill percentage for progress bar
                int fillPercentage = 0;
               @*  if (run.PlayerLimit > 0)
                {
                    fillPercentage = (int)Math.Min(100, Math.Round(((double)run.PlayerCount / run.PlayerLimit) * 100));
                } *@

                // Get host initials
                string hostInitials = "NA";
                if (!string.IsNullOrEmpty(run.ProfileId))
                {
                    var names = run.ProfileId.Split(' ');
                    if (names.Length >= 2)
                    {
                        hostInitials = $"{names[0][0]}{names[1][0]}";
                    }
                    else if (names.Length == 1 && names[0].Length > 0)
                    {
                        hostInitials = names[0][0].ToString();
                    }
                }

                // Get court theme color
               @*  string courtColor = run.RunId % 2 == 0 ? "FF6B00" : "1C2C5B"; *@
                string courtName = !string.IsNullOrEmpty(run.Address) ? run.Address : "Basketball Court";

                <div class="col-md-6">
                    <div class="card run-card shadow-sm">
                        <div class="run-banner" style="background-image: url('https://placehold.co/600x200/@@courtColor/FFFFFF?text=@Uri.EscapeDataString(courtName)')">
                            <span class="status-badge @badgeClass">@badgeText</span>
                            <span class="run-time"><i class="bi bi-clock me-1"></i>@(run.RunTime)</span>
                        </div>
                        <div class="run-host">@hostInitials</div>
                        <div class="card-body p-4">
                            <div class="d-flex justify-content-between align-items-start mb-3">
                                <div>
                                    <h5 class="mb-1">@run.Name</h5>
                                    <p class="text-muted mb-0">@run.Address </p>
                                </div>
                            </div>
                            <p class="mb-3">@run.Description</p>
                            <div class="mb-3">
                                <div class="d-flex justify-content-between mb-1">
                                    <span class="small">@(run.RunDate < DateTime.Now ? "Attendance" : "Spots filled")</span>
                                    <span class="small text-orange">@run.PlayerCount/@run.PlayerLimit</span>
                                </div>
                                <div class="progress progress-sm">
                                    <div class="progress-bar bg-orange" role="progressbar" style="width: @(fillPercentage)%" aria-valuenow="@fillPercentage" aria-valuemin="0" aria-valuemax="100"></div>
                                </div>
                            </div>
                            <div class="d-flex justify-content-between align-items-center">
                               @*  <span class="text-muted small">Hosted by @run.HostName</span> *@
                                <div>
                                    <button type="button" class="btn btn-sm btn-outline-navy me-2" data-bs-toggle="modal" data-bs-target="#editRunModal" data-run-id="@run.RunId">
                                        <i class="bi bi-pencil me-1"></i>Edit
                                    </button>
                                    <a href="@Url.Action("RunDetails", "Dashboard", new { id = run.RunId })" class="btn btn-sm btn-navy">
                                        <i class="bi bi-eye me-1"></i>View
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12">
                <div class="no-runs-message">
                    <i class="bi bi-calendar-x" style="font-size: 3rem; color: var(--secondary-color);"></i>
                    <h3 class="mt-3">No Runs Found</h3>
                    <p class="text-muted">There are no runs available at the moment. Create a new run to get started!</p>
                    <button type="button" class="btn btn-orange mt-3" data-bs-toggle="modal" data-bs-target="#addRunModal">
                        <i class="bi bi-plus-circle me-2"></i>Create Run
                    </button>
                </div>
            </div>
        }
    </div>

    <!-- Pagination -->
    @if (Model?.HasNextPage == true || Model?.HasPreviousPage == true)
    {
        <div class="d-flex justify-content-center mt-5">
            <nav aria-label="Run pagination">
                <ul class="pagination">
                    @if (Model.HasPreviousPage)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Run", "Dashboard", new { cursor = Model.PreviousCursor, direction = "previous", limit = Model.PageSize, sortBy = Model.CurrentSortBy, searchTerm = Model.SearchTerm })" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item disabled">
                            <a class="page-link" href="#" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                    }

                    <li class="page-item active"><a class="page-link" href="#">1</a></li>

                    @if (Model.HasNextPage)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Run", "Dashboard", new { cursor = Model.NextCursor, direction = "next", limit = Model.PageSize, sortBy = Model.CurrentSortBy, searchTerm = Model.SearchTerm })" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item disabled">
                            <a class="page-link" href="#" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    }
                </ul>
            </nav>
        </div>
    }
</div>

<!-- Add Run Modal -->
<div class="modal fade" id="addRunModal" tabindex="-1" aria-labelledby="addRunModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addRunModalLabel">Create New Run</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="addRunForm" method="post" action="@Url.Action("CreateRun", "Dashboard")">
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-12">
                            <label for="runTitle" class="form-label">Run Title</label>
                            <input type="text" class="form-control" id="runTitle" name="Title" placeholder="e.g. Weeknight Run, Sunday Morning Basketball" required>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="runDate" class="form-label">Date</label>
                            <input type="date" class="form-control date-picker" id="runDate" name="RunDate" required>
                        </div>
                        <div class="col-md-6">
                            <label for="runTime" class="form-label">Time</label>
                            <input type="time" class="form-control time-picker" id="runTime" name="RunTime" required>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="courtLocation" class="form-label">Court Location</label>
                            <select class="form-select" id="courtLocation" name="Location" required>
                                <option value="" selected disabled>Select a location</option>
                                <option value="Main Street Courts">Main Street Courts</option>
                                <option value="City Gym">City Gym</option>
                                <option value="Westside Park Courts">Westside Park Courts</option>
                                <option value="Community Center">Community Center</option>
                                <option value="Youth Center">Youth Center</option>
                                <option value="Recreation Center">Recreation Center</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="courtType" class="form-label">Court Type</label>
                            <select class="form-select" id="courtType" name="IsOutdoor" required>
                                <option value="false" selected>Indoor</option>
                                <option value="true">Outdoor</option>
                            </select>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="maxParticipants" class="form-label">Maximum Participants</label>
                            <input type="number" class="form-control" id="maxParticipants" name="MaxParticipants" min="2" max="30" value="10" required>
                        </div>
                        <div class="col-md-6">
                            <label for="skillLevel" class="form-label">Skill Level</label>
                            <select class="form-select" id="skillLevel" name="SkillLevel" required>
                                <option value="Beginner">Beginner</option>
                                <option value="Intermediate" selected>Intermediate</option>
                                <option value="Advanced">Advanced</option>
                                <option value="All Levels">All Levels</option>
                            </select>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-12">
                            <label for="runDescription" class="form-label">Description</label>
                            <textarea class="form-control" id="runDescription" name="Description" rows="3" placeholder="Describe the run, what to expect, what to bring, etc." required></textarea>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-12">
                            <label for="runType" class="form-label">Run Type</label>
                            <select class="form-select" id="runType" name="RunType" required>
                                <option value="Pickup" selected>Pickup Games</option>
                                <option value="Training">Training Session</option>
                                <option value="Tournament">Tournament</option>
                                <option value="Youth">Youth Development</option>
                                <option value="Women">Women's Only</option>
                            </select>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-12">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="makeRecurring" name="IsRecurring">
                                <label class="form-check-label" for="makeRecurring">
                                    Make this a recurring run
                                </label>
                            </div>
                        </div>
                    </div>

                    <div class="row mb-3 recurring-options" style="display: none;">
                        <div class="col-md-6">
                            <label for="recurringType" class="form-label">Recurrence</label>
                            <select class="form-select" id="recurringType" name="RecurringType">
                                <option value="Weekly" selected>Weekly</option>
                                <option value="Biweekly">Bi-weekly</option>
                                <option value="Monthly">Monthly</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="recurringEndDate" class="form-label">End Date</label>
                            <input type="date" class="form-control date-picker" id="recurringEndDate" name="RecurringEndDate">
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-orange">Create Run</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Run Modal -->
<div class="modal fade" id="editRunModal" tabindex="-1" aria-labelledby="editRunModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editRunModalLabel">Edit Run</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <ul class="nav nav-tabs" id="editRunTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="details-tab" data-bs-toggle="tab" data-bs-target="#details-tab-pane" type="button" role="tab" aria-controls="details-tab-pane" aria-selected="true">Details</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="participants-tab" data-bs-toggle="tab" data-bs-target="#participants-tab-pane" type="button" role="tab" aria-controls="participants-tab-pane" aria-selected="false">Participants</button>
                    </li>
                </ul>
                <div class="tab-content" id="editRunTabContent">
                    <div class="tab-pane fade show active" id="details-tab-pane" role="tabpanel" aria-labelledby="details-tab" tabindex="0">
                        <form id="editRunForm" method="post" action="@Url.Action("UpdateRun", "Dashboard")" class="mt-4">
                            <input type="hidden" id="editRunId" name="Id" value="" />

                            <div class="row mb-3">
                                <div class="col-md-12">
                                    <label for="editRunTitle" class="form-label">Run Title</label>
                                    <input type="text" class="form-control" id="editRunTitle" name="Title" required>
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="editRunDate" class="form-label">Date</label>
                                    <input type="date" class="form-control date-picker" id="editRunDate" name="RunDate" required>
                                </div>
                                <div class="col-md-6">
                                    <label for="editRunTime" class="form-label">Time</label>
                                    <input type="time" class="form-control time-picker" id="editRunTime" name="RunTime" required>
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="editCourtLocation" class="form-label">Court Location</label>
                                    <select class="form-select" id="editCourtLocation" name="Location" required>
                                        <option value="Main Street Courts">Main Street Courts</option>
                                        <option value="City Gym">City Gym</option>
                                        <option value="Westside Park Courts">Westside Park Courts</option>
                                        <option value="Community Center">Community Center</option>
                                        <option value="Youth Center">Youth Center</option>
                                        <option value="Recreation Center">Recreation Center</option>
                                    </select>
                                </div>
                                <div class="col-md-6">
                                    <label for="editCourtType" class="form-label">Court Type</label>
                                    <select class="form-select" id="editCourtType" name="IsOutdoor" required>
                                        <option value="false">Indoor</option>
                                        <option value="true">Outdoor</option>
                                    </select>
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="editMaxParticipants" class="form-label">Maximum Participants</label>
                                    <input type="number" class="form-control" id="editMaxParticipants" name="MaxParticipants" min="2" max="30" required>
                                </div>
                                <div class="col-md-6">
                                    <label for="editStatus" class="form-label">Status</label>
                                    <select class="form-select" id="editStatus" name="Status" required>
                                        <option value="Active">Active</option>
                                        <option value="Full">Full</option>
                                        <option value="Cancelled">Cancelled</option>
                                        <option value="Completed">Completed</option>
                                    </select>
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-12">
                                    <label for="editRunDescription" class="form-label">Description</label>
                                    <textarea class="form-control" id="editRunDescription" name="Description" rows="3" required></textarea>
                                </div>
                            </div>

                            <div class="modal-footer">
                                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-danger me-auto" id="deleteRunBtn">Delete Run</button>
                                <button type="submit" class="btn btn-orange">Save Changes</button>
                            </div>
                        </form>
                    </div>
                    <div class="tab-pane fade" id="participants-tab-pane" role="tabpanel" aria-labelledby="participants-tab" tabindex="0">
                        <div class="mt-4">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h6 class="mb-0">Current Participants (<span id="currentParticipantsCount">0</span>/<span id="maxParticipantsCount">0</span>)</h6>
                                <button class="btn btn-sm btn-outline-primary" id="addParticipantBtn">
                                    <i class="bi bi-person-plus me-1"></i>Add Participant
                                </button>
                            </div>
                            <div class="participants-list" id="participantsList">
                                <!-- Participants will be loaded dynamically via JavaScript -->
                                <div class="text-center py-4 text-muted">
                                    <i class="bi bi-people"></i> Loading participants...
                                </div>
                            </div>

                            <div class="mt-4">
                                <h6 class="mb-3">Waitlist</h6>
                                <div id="waitlistContainer">
                                    <p class="text-muted small">No players on the waitlist</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Run Confirmation Modal -->
<div class="modal fade" id="deleteRunModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Deletion</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this run? This action cannot be undone.</p>
                <p class="text-danger"><strong>Note:</strong> All participants will be notified that this run has been cancelled.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                <form id="deleteRunForm" method="post" action="@Url.Action("DeleteRun", "Dashboard")">
                    <input type="hidden" id="deleteRunId" name="id" value="" />
                    <button type="submit" class="btn btn-danger">Delete Run</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Set minimum date for date pickers to today
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('runDate').min = today;

            if (document.getElementById('recurringEndDate')) {
                document.getElementById('recurringEndDate').min = today;
            }

            // Handle recurring run checkbox
            const makeRecurringCheckbox = document.getElementById('makeRecurring');
            const recurringOptions = document.querySelector('.recurring-options');

            if (makeRecurringCheckbox && recurringOptions) {
                makeRecurringCheckbox.addEventListener('change', function() {
                    if (this.checked) {
                        recurringOptions.style.display = 'flex';
                    } else {
                        recurringOptions.style.display = 'none';
                    }
                });
            }

            // Handle filter dropdown
            const filterDropdown = document.getElementById('runFilterDropdown');
            if (filterDropdown) {
                filterDropdown.addEventListener('change', function() {
                    const filterValue = this.value.toLowerCase();
                    const runCards = document.querySelectorAll('.run-card');

                    if (filterValue === 'all') {
                        // Show all runs
                        runCards.forEach(card => {
                            card.closest('.col-md-6').style.display = '';
                        });
                        return;
                    }

                    runCards.forEach(card => {
                        const statusBadge = card.querySelector('.status-badge').textContent.toLowerCase();
                        const timeInfo = card.querySelector('.run-time').textContent.toLowerCase();
                        const host = card.querySelector('.text-muted.small').textContent.toLowerCase();

                        let shouldShow = true;

                        if (filterValue === 'upcoming' && !statusBadge.includes('upcoming')) {
                            shouldShow = false;
                        } else if (filterValue === 'past' && !statusBadge.includes('past')) {
                            shouldShow = false;
                        } else if (filterValue === 'full' && !(statusBadge.includes('full') || statusBadge.includes('almost full'))) {
                            shouldShow = false;
                        } else if (filterValue === 'my' && !host.includes('hosted by james davis')) {
                            shouldShow = false;
                        }

                        card.closest('.col-md-6').style.display = shouldShow ? '' : 'none';
                    });

                    // Show "no runs" message if all are filtered out
                    const visibleRuns = document.querySelectorAll('.run-card[style="display: none;"]');
                    const noRunsMessage = document.querySelector('.no-runs-message');

                    if (visibleRuns.length === runCards.length && noRunsMessage) {
                        noRunsMessage.style.display = 'block';
                    } else if (noRunsMessage) {
                        noRunsMessage.style.display = 'none';
                    }
                });
            }

            // Handle edit run modal
            const editRunModal = document.getElementById('editRunModal');
            if (editRunModal) {
                editRunModal.addEventListener('show.bs.modal', function(event) {
                    const button = event.relatedTarget;
                    const runId = button.getAttribute('data-run-id');
                    document.getElementById('editRunId').value = runId;

                    // Load run data via AJAX
                    fetch(`@Url.Action("GetRunData", "Dashboard")?id=${runId}`)
                        .then(response => response.json())
                        .then(data => {
                            // Populate form fields
                            document.getElementById('editRunTitle').value = data.title;

                            // Format date and time
                            if (data.startTime) {
                                const startTime = new Date(data.startTime);
                                const dateString = startTime.toISOString().split('T')[0];
                                document.getElementById('editRunDate').value = dateString;

                                const hours = startTime.getHours().toString().padStart(2, '0');
                                const minutes = startTime.getMinutes().toString().padStart(2, '0');
                                document.getElementById('editRunTime').value = `${hours}:${minutes}`;
                            }

                            document.getElementById('editCourtLocation').value = data.location;
                            document.getElementById('editCourtType').value = data.isOutdoor.toString();
                            document.getElementById('editMaxParticipants').value = data.maxParticipants;
                            document.getElementById('editStatus').value = data.status;
                            document.getElementById('editRunDescription').value = data.description;

                            // Set delete button run ID
                            document.getElementById('deleteRunId').value = runId;

                            // Update participants count
                            document.getElementById('currentParticipantsCount').textContent = data.currentParticipants;
                            document.getElementById('maxParticipantsCount').textContent = data.maxParticipants;

                            // Load participants
                            loadParticipants(runId);
                        })
                        .catch(error => {
                            console.error('Error loading run data:', error);
                            alert('Error loading run data. Please try again.');
                        });
                });
            }

            // Handle delete run button
            const deleteRunBtn = document.getElementById('deleteRunBtn');
            if (deleteRunBtn) {
                deleteRunBtn.addEventListener('click', function() {
                    const runId = document.getElementById('editRunId').value;
                    document.getElementById('deleteRunId').value = runId;

                    // Hide edit modal and show delete confirmation modal
                    const editModal = bootstrap.Modal.getInstance(document.getElementById('editRunModal'));
                    editModal.hide();

                    const deleteModal = new bootstrap.Modal(document.getElementById('deleteRunModal'));
                    deleteModal.show();
                });
            }

            // Function to load participants
            function loadParticipants(runId) {
                const participantsList = document.getElementById('participantsList');

                fetch(`@Url.Action("GetRunParticipants", "Dashboard")?runId=${runId}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.length === 0) {
                            participantsList.innerHTML = `
                                <div class="text-center py-4 text-muted">
                                    <p>No participants have joined this run yet.</p>
                                </div>`;
                            return;
                        }

                        let html = '';

                        data.forEach(participant => {
                            const initials = participant.name.split(' ')
                                .map(name => name[0])
                                .join('')
                                .substring(0, 2);

                            html += `
                                <div class="d-flex align-items-center p-2 border-bottom">
                                    <div class="flex-shrink-0 me-3" style="width: 40px; height: 40px; background-color: var(--secondary-color); color: white; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-weight: bold;">
                                        ${initials}
                                    </div>
                                    <div class="flex-grow-1">
                                        <h6 class="mb-0">${participant.name}</h6>
                                        <span class="text-muted small">Joined ${new Date(participant.joinedDate).toLocaleDateString()}</span>
                                    </div>
                                    <div class="dropdown">
                                        <button class="btn btn-sm btn-light" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                            <i class="bi bi-three-dots-vertical"></i>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end">
                                            <li><a class="dropdown-item" href="#"><i class="bi bi-envelope me-2"></i>Message</a></li>
                                            <li><a class="dropdown-item" href="#"><i class="bi bi-person me-2"></i>View Profile</a></li>
                                            <li><hr class="dropdown-divider"></li>
                                            <li><a class="dropdown-item text-danger remove-participant" data-participant-id="${participant.id}" href="#"><i class="bi bi-person-x me-2"></i>Remove</a></li>
                                        </ul>
                                    </div>
                                </div>`;
                        });

                        participantsList.innerHTML = html;

                        // Add event listeners to remove buttons
                        document.querySelectorAll('.remove-participant').forEach(button => {
                            button.addEventListener('click', function(e) {
                                e.preventDefault();
                                const participantId = this.getAttribute('data-participant-id');
                                const runId = document.getElementById('editRunId').value;

                                if (confirm('Are you sure you want to remove this participant?')) {
                                    removeParticipant(runId, participantId);
                                }
                            });
                        });
                    })
                    .catch(error => {
                        console.error('Error loading participants:', error);
                        participantsList.innerHTML = `
                            <div class="text-center py-4 text-danger">
                                <p>Error loading participants. Please try again.</p>
                            </div>`;
                    });
            }

            // Function to remove participant
            function removeParticipant(runId, participantId) {
                fetch('@Url.Action("RemoveParticipant", "Dashboard")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ runId, participantId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Reload participants
                        loadParticipants(runId);

                        // Update count
                        const currentCount = parseInt(document.getElementById('currentParticipantsCount').textContent);
                        document.getElementById('currentParticipantsCount').textContent = currentCount - 1;
                    } else {
                        alert('Error removing participant: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error removing participant:', error);
                    alert('Error removing participant. Please try again.');
                });
            }

            // Add participant button
            const addParticipantBtn = document.getElementById('addParticipantBtn');
            if (addParticipantBtn) {
                addParticipantBtn.addEventListener('click', function() {
                    const runId = document.getElementById('editRunId').value;
                    const currentCount = parseInt(document.getElementById('currentParticipantsCount').textContent);
                    const maxCount = parseInt(document.getElementById('maxParticipantsCount').textContent);

                    if (currentCount >= maxCount) {
                        alert('This run is already at maximum capacity. Cannot add more participants.');
                        return;
                    }

                    const email = prompt('Enter participant email address:');
                    if (!email) return;

                    // Add participant via AJAX
                    fetch('@Url.Action("AddParticipant", "Dashboard")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify({ runId, email })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Reload participants
                            loadParticipants(runId);

                            // Update count
                            document.getElementById('currentParticipantsCount').textContent = currentCount + 1;
                        } else {
                            alert('Error adding participant: ' + data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error adding participant:', error);
                        alert('Error adding participant. Please try again.');
                    });
                });
            }
        });
    </script>
}