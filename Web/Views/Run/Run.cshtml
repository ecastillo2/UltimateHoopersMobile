@model Website.ViewModels.RunsViewModel

@{
    ViewData["Title"] = "Run Management";
    var userType = ViewData["UserType"]?.ToString() ?? "Coach";
}

@section Styles {
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/dataTables.bootstrap5.min.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/responsive/2.2.9/css/responsive.bootstrap5.min.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/buttons/2.2.2/css/buttons.bootstrap5.min.css">
    <link rel="stylesheet" type="text/css" href="~/css/management.css">
    <style>
        .loading-spinner {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 9999;
            background: rgba(255, 255, 255, 0.9);
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

            .loading-spinner.active {
                display: flex;
                flex-direction: column;
                align-items: center;
            }

        .participant-avatar {
            width: 40px;
            height: 40px;
            background-color: var(--secondary-color);
            color: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
        }

        .court-dropdown-loading {
            background-image: url("data:image/svg+xml,%3csvg width='16' height='16' viewBox='0 0 16 16' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M8 3a5 5 0 11-4.546 2.914.5.5 0 00-.908-.417A6 6 0 108 2v1z'/%3e%3cpath d='M8 4.466V.534a.25.25 0 01.41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 018 4.466z'/%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right 8px center;
            background-size: 16px;
        }

        .form-field-required::after {
            content: " *";
            color: #dc3545;
        }
    </style>
}

<div class="loading-spinner" id="loadingSpinner">
    <div class="spinner-border text-primary mb-2" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
    <div class="text-muted">Loading...</div>
</div>

<div class="dashboard-header">
    <div class="container">
        <h1>Run Management</h1>
        <p class="lead">Create and manage basketball runs, track participants, and schedule sessions</p>
    </div>
</div>

<div class="container">
    <!-- Back button to dashboard -->
    <div class="back-button mb-4">
        <a href="@Url.Action("Dashboard", "Dashboard")" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left me-2"></i>Back to Dashboard
        </a>
    </div>

    <!-- Run Filters -->
    <div class="mb-4">
        <div class="card shadow-sm">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h5 class="mb-0">Filter Runs</h5>
                    <button class="btn btn-sm btn-outline-secondary" id="resetFilters">
                        <i class="bi bi-arrow-counterclockwise me-1"></i>
                        Reset Filters
                    </button>
                </div>

                <div class="row g-3">
                    <div class="col-md-3">
                        <label for="statusFilter" class="form-label">Status</label>
                        <select class="form-select" id="statusFilter">
                            <option value="all" selected>All Statuses</option>
                            <option value="upcoming">Upcoming</option>
                            <option value="almost-full">Almost Full</option>
                            <option value="past">Past</option>
                        </select>
                    </div>

                    <div class="col-md-3">
                        <label for="dateFilter" class="form-label">Date</label>
                        <select class="form-select" id="dateFilter">
                            <option value="all" selected>All Dates</option>
                            <option value="today">Today</option>
                            <option value="this-week">This Week</option>
                            <option value="upcoming">Upcoming</option>
                            <option value="past">Past</option>
                        </select>
                    </div>

                    <div class="col-md-3">
                        <label for="locationFilter" class="form-label">Location</label>
                        <select class="form-select" id="locationFilter">
                            <option value="all" selected>All Locations</option>
                            <option value="Main Street Courts">Main Street Courts</option>
                            <option value="City Gym">City Gym</option>
                            <option value="Westside Park Courts">Westside Park Courts</option>
                            <option value="Community Center">Community Center</option>
                            <option value="Youth Center">Youth Center</option>
                            <option value="Recreation Center">Recreation Center</option>
                        </select>
                    </div>

                    <div class="col-md-3">
                        <label for="typeFilter" class="form-label">Run Type</label>
                        <select class="form-select" id="typeFilter">
                            <option value="all" selected>All Types</option>
                            <option value="pickup">Pickup</option>
                            <option value="training">Training</option>
                            <option value="tournament">Tournament</option>
                            <option value="youth">Youth</option>
                            <option value="women">Women</option>
                        </select>
                    </div>
                </div>

                <div class="mt-3" id="activeFilters">
                    <span class="badge bg-secondary me-2">Active Filters:</span>
                    <span class="text-muted filter-none">None</span>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-12 text-end">
            <button type="button" class="btn btn-orange" data-bs-toggle="modal" data-bs-target="#addRunModal">
                <i class="bi bi-plus-circle me-2"></i>Create Run
            </button>
        </div>
    </div>

    <!-- DataTable -->
    @if (Model?.Runs != null && Model.Runs.Any())
    {
        <div class="card shadow-sm">
            <div class="card-body">
                <table id="runsTable" class="table table-striped table-hover w-100">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Date & Time</th>
                            <th>Location</th>
                            <th>Participants</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var run in Model.Runs)
                        {
                            // Determine run status badge
                            string badgeClass = "bg-success";
                            string badgeText = "Upcoming";

                            if (run.PlayerCount > 0 && run.PlayerLimit > 0 &&
                            (float)run.PlayerCount / run.PlayerLimit >= 0.85)
                            {
                                badgeClass = "bg-warning";
                                badgeText = "Almost Full";
                            }
                            else if (run.RunDate < DateTime.Now)
                            {
                                badgeClass = "bg-secondary";
                                badgeText = "Past";
                            }

                            // Get host initials
                            string hostInitials = "NA";
                            if (!string.IsNullOrEmpty(run.ProfileId))
                            {
                                var names = run.ProfileId.Split(' ');
                                if (names.Length >= 2)
                                {
                                    hostInitials = $"{names[0][0]}{names[1][0]}";
                                }
                                else if (names.Length == 1 && names[0].Length > 0)
                                {
                                    hostInitials = names[0][0].ToString();
                                }
                            }

                            <tr data-run-type="@(run.Type?.ToLower() ?? "pickup")"
                                data-capacity-current="@run.PlayerCount"
                                data-capacity-max="@run.PlayerLimit"
                                data-run-date="@(run.RunDate?.ToString("yyyy-MM-dd"))"
                                data-location="@run.Address">
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="me-3">
                                            <div class="fw-semibold">@run.Name</div>
                                            <div class="text-muted small">@(run.Type ?? "Pickup") • @(run.SkillLevel ?? "All Levels")</div>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <div class="fw-semibold">@run.RunDate?.ToString("MMM dd, yyyy")</div>
                                        <div class="text-muted small">
                                            @if (run.StartTime.HasValue)
                                            {
                                                @DateTime.Today.Add(run.StartTime.Value).ToString("h:mm tt")
                                            }
                                            @if (run.EndTime.HasValue)
                                            {
                                                <span> - @DateTime.Today.Add(run.EndTime.Value).ToString("h:mm tt")</span>
                                            }
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <div class="fw-semibold">@(run.Address ?? "Location TBD")</div>
                                        @if (!string.IsNullOrEmpty(run.City) || !string.IsNullOrEmpty(run.State))
                                        {
                                            <div class="text-muted small">@run.City@(!string.IsNullOrEmpty(run.City) && !string.IsNullOrEmpty(run.State) ? ", " : "")@run.State</div>
                                        }
                                    </div>
                                </td>
                                <td>
                                    <div class="capacity-container">
                                        <div class="capacity-text">@(run.PlayerCount ?? 0)/@(run.PlayerLimit ?? 0)</div>
                                        <div class="progress progress-sm" style="width: 60px;">
                                            @{
                                                var percentFull = run.PlayerLimit > 0 ? ((double)(run.PlayerCount ?? 0) / run.PlayerLimit.Value) * 100 : 0;
                                                var progressClass = percentFull >= 85 ? "bg-warning" : "bg-primary";
                                            }
                                            <div class="progress-bar @progressClass" role="progressbar" style="width: @percentFull%" aria-valuenow="@percentFull" aria-valuemin="0" aria-valuemax="100"></div>
                                        </div>
                                    </div>
                                </td>
                                <td><span class="badge @badgeClass badge-pill">@badgeText</span></td>
                                <td>
                                    <div class="table-actions">
                                        <button type="button" class="btn btn-sm btn-outline-primary action-icon" data-bs-toggle="modal" data-bs-target="#editRunModal" data-run-id="@run.RunId" title="Edit">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        <a href="@Url.Action("Details", "Run", new { id = run.RunId })" class="btn btn-sm btn-primary action-icon" title="View">
                                            <i class="bi bi-eye"></i>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else
    {
        <div class="no-runs-message text-center">
            <i class="bi bi-calendar-x" style="font-size: 3rem; color: var(--secondary-color);"></i>
            <h3 class="mt-3">No Runs Found</h3>
            <p class="text-muted">There are no runs available at the moment. Create a new run to get started!</p>
            <button type="button" class="btn btn-orange mt-3" data-bs-toggle="modal" data-bs-target="#addRunModal">
                <i class="bi bi-plus-circle me-2"></i>Create Run
            </button>
        </div>
    }
</div>

<!-- Add Run Modal -->
<div class="modal fade" id="addRunModal" tabindex="-1" aria-labelledby="addRunModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addRunModalLabel">Create New Run</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="addRunForm" method="post" action="@Url.Action("Create", "Run")">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-12">
                            <label for="runTitle" class="form-label form-field-required">Run Title</label>
                            <input type="text" class="form-control" id="runTitle" name="Name" placeholder="e.g. Weeknight Run, Sunday Morning Basketball" required>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="runDate" class="form-label form-field-required">Date</label>
                            <input type="date" class="form-control date-picker" id="runDate" name="RunDate" required>
                        </div>
                        <div class="col-md-6">
                            <label for="runTime" class="form-label form-field-required">Start Time</label>
                            <input type="time" class="form-control time-picker" id="runTime" name="StartTime" required>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="endTime" class="form-label">End Time</label>
                            <input type="time" class="form-control time-picker" id="endTime" name="EndTime">
                        </div>
                        <div class="col-md-6">
                            <label for="courtType" class="form-label">Court Type</label>
                            <select class="form-select" id="courtType" name="IsOutdoor">
                                <option value="false" selected>Indoor</option>
                                <option value="true">Outdoor</option>
                            </select>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-12">
                            <label for="address" class="form-label">Address</label>
                            <input type="text" class="form-control" id="address" name="Address" placeholder="e.g. 123 Basketball Court St">
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="city" class="form-label">City</label>
                            <input type="text" class="form-control" id="city" name="City" placeholder="City">
                        </div>
                        <div class="col-md-4">
                            <label for="state" class="form-label">State</label>
                            <input type="text" class="form-control" id="state" name="State" placeholder="State">
                        </div>
                        <div class="col-md-4">
                            <label for="zip" class="form-label">Zip Code</label>
                            <input type="text" class="form-control" id="zip" name="Zip" placeholder="Zip">
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="maxParticipants" class="form-label form-field-required">Maximum Participants</label>
                            <input type="number" class="form-control" id="maxParticipants" name="PlayerLimit" min="2" max="30" value="10" required>
                        </div>
                        <div class="col-md-6">
                            <label for="skillLevel" class="form-label">Skill Level</label>
                            <select class="form-select" id="skillLevel" name="SkillLevel">
                                <option value="Beginner">Beginner</option>
                                <option value="Intermediate" selected>Intermediate</option>
                                <option value="Advanced">Advanced</option>
                                <option value="All Levels">All Levels</option>
                            </select>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="runType" class="form-label">Run Type</label>
                            <select class="form-select" id="runType" name="Type">
                                <option value="Pickup" selected>Pickup Games</option>
                                <option value="Training">Training Session</option>
                                <option value="Tournament">Tournament</option>
                                <option value="Youth">Youth Development</option>
                                <option value="Women">Women's Only</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="isPublic" class="form-label">Visibility</label>
                            <select class="form-select" id="isPublic" name="IsPublic">
                                <option value="true" selected>Public</option>
                                <option value="false">Private</option>
                            </select>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-12">
                            <label for="runDescription" class="form-label form-field-required">Description</label>
                            <textarea class="form-control" id="runDescription" name="Description" rows="3" placeholder="Describe the run, what to expect, what to bring, etc." required></textarea>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-orange">Create Run</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Run Modal -->
<div class="modal fade" id="editRunModal" tabindex="-1" aria-labelledby="editRunModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editRunModalLabel">Edit Run</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <ul class="nav nav-tabs" id="editRunTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="details-tab" data-bs-toggle="tab" data-bs-target="#details-tab-pane" type="button" role="tab" aria-controls="details-tab-pane" aria-selected="true">Details</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="participants-tab" data-bs-toggle="tab" data-bs-target="#participants-tab-pane" type="button" role="tab" aria-controls="participants-tab-pane" aria-selected="false">Participants</button>
                    </li>
                </ul>
                <div class="tab-content" id="editRunTabContent">
                    <div class="tab-pane fade show active" id="details-tab-pane" role="tabpanel" aria-labelledby="details-tab" tabindex="0">
                        <form id="editRunForm" method="post" action="@Url.Action("Edit", "Run")" class="mt-4">
                            @Html.AntiForgeryToken()
                            <input type="hidden" id="editRunId" name="RunId" value="" />
                            <input type="hidden" id="editProfileId" name="ProfileId" value="" />

                            <div class="row mb-3">
                                <div class="col-md-12">
                                    <label for="editRunTitle" class="form-label form-field-required">Name</label>
                                    <input type="text" class="form-control" id="editRunTitle" name="Name" required>
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="editRunDate" class="form-label form-field-required">Date</label>
                                    <input type="date" class="form-control date-picker" id="editRunDate" name="RunDate" required>
                                </div>
                                <div class="col-md-6">
                                    <label for="editRunTime" class="form-label form-field-required">Start Time</label>
                                    <input type="time" class="form-control time-picker" id="editRunTime" name="StartTime" required>
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="editEndTime" class="form-label">End Time</label>
                                    <input type="time" class="form-control time-picker" id="editEndTime" name="EndTime">
                                </div>
                                <div class="col-md-6">
                                    <label for="editCourtType" class="form-label">Court Type</label>
                                    <select class="form-select" id="editCourtType" name="IsOutdoor">
                                        <option value="false">Indoor</option>
                                        <option value="true">Outdoor</option>
                                    </select>
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="editCourtList" class="form-label">Choose Court</label>
                                    <select class="form-select" id="editCourtList" name="CourtId">
                                        <option value="">Loading courts...</option>
                                    </select>
                                </div>
                                <div class="col-md-6">
                                    <label for="editClientId" class="form-label">Client</label>
                                    <input type="text" class="form-control" id="editClientId" name="ClientId" readonly>
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-12">
                                    <label for="editAddress" class="form-label">Address</label>
                                    <input type="text" class="form-control" id="editAddress" name="Address">
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-4">
                                    <label for="editCity" class="form-label">City</label>
                                    <input type="text" class="form-control" id="editCity" name="City">
                                </div>
                                <div class="col-md-4">
                                    <label for="editState" class="form-label">State</label>
                                    <input type="text" class="form-control" id="editState" name="State">
                                </div>
                                <div class="col-md-4">
                                    <label for="editZip" class="form-label">Zip Code</label>
                                    <input type="text" class="form-control" id="editZip" name="Zip">
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="editIsPublic" class="form-label">Visibility</label>
                                    <select class="form-select" id="editIsPublic" name="IsPublic">
                                        <option value="true">Public</option>
                                        <option value="false">Private</option>
                                    </select>
                                </div>
                                <div class="col-md-6">
                                    <label for="editSkillLevel" class="form-label">Skill Level</label>
                                    <select class="form-select" id="editSkillLevel" name="SkillLevel">
                                        <option value="Beginner">Beginner</option>
                                        <option value="Intermediate">Intermediate</option>
                                        <option value="Advanced">Advanced</option>
                                        <option value="All Levels">All Levels</option>
                                    </select>
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="editMaxParticipants" class="form-label form-field-required">Maximum Participants</label>
                                    <input type="number" class="form-control" id="editMaxParticipants" name="PlayerLimit" min="2" max="30" required>
                                </div>
                                <div class="col-md-6">
                                    <label for="editStatus" class="form-label">Status</label>
                                    <select class="form-select" id="editStatus" name="Status">
                                        <option value="Active">Active</option>
                                        <option value="Inactive">Inactive</option>
                                        <option value="Cancelled">Cancelled</option>
                                        <option value="Completed">Completed</option>
                                    </select>
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="editRunType" class="form-label">Run Type</label>
                                    <select class="form-select" id="editRunType" name="Type">
                                        <option value="Pickup">Pickup Games</option>
                                        <option value="Training">Training Session</option>
                                        <option value="Tournament">Tournament</option>
                                        <option value="Youth">Youth Development</option>
                                        <option value="Women">Women's Only</option>
                                    </select>
                                </div>
                                <div class="col-md-6">
                                    <label for="editTeamType" class="form-label">Team Type</label>
                                    <select class="form-select" id="editTeamType" name="TeamType">
                                        <option value="Individual">Individual</option>
                                        <option value="Team">Team</option>
                                    </select>
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-12">
                                    <label for="editRunDescription" class="form-label form-field-required">Description</label>
                                    <textarea class="form-control" id="editRunDescription" name="Description" rows="3" required></textarea>
                                </div>
                            </div>

                            <div class="modal-footer">
                                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-danger me-auto" id="deleteRunBtn">Delete Run</button>
                                <button type="submit" class="btn btn-orange">Save Changes</button>
                            </div>
                        </form>
                    </div>
                    <div class="tab-pane fade" id="participants-tab-pane" role="tabpanel" aria-labelledby="participants-tab" tabindex="0">
                        <div class="mt-4">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h6 class="mb-0">Current Participants (<span id="currentParticipantsCount">0</span>/<span id="maxParticipantsCount">0</span>)</h6>
                                <button class="btn btn-sm btn-outline-primary" id="addParticipantBtn">
                                    <i class="bi bi-person-plus me-1"></i>Add Participant
                                </button>
                            </div>
                            <div class="participants-list" id="participantsList">
                                <div class="text-center py-4 text-muted">
                                    <i class="bi bi-people"></i> Loading participants...
                                </div>
                            </div>

                            <div class="mt-4">
                                <h6 class="mb-3">Waitlist</h6>
                                <div id="waitlistContainer">
                                    <p class="text-muted small">No players on the waitlist</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Run Confirmation Modal -->
<div class="modal fade" id="deleteRunModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Deletion</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this run? This action cannot be undone.</p>
                <p class="text-danger"><strong>Note:</strong> All participants will be notified that this run has been cancelled.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                <form id="deleteRunForm" method="post" action="@Url.Action("Delete", "Run")">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="deleteRunId" name="id" value="" />
                    <button type="submit" class="btn btn-danger">Delete Run</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script type="text/javascript" src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/1.11.5/js/dataTables.bootstrap5.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/responsive/2.2.9/js/dataTables.responsive.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/responsive/2.2.9/js/responsive.bootstrap5.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/buttons/2.2.2/js/dataTables.buttons.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/buttons/2.2.2/js/buttons.bootstrap5.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/buttons/2.2.2/js/buttons.html5.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Helper functions
            function getAntiForgeryToken() {
                return document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';
            }

            function showLoading() {
                const spinner = document.getElementById('loadingSpinner');
                if (spinner) spinner.classList.add('active');
            }

            function hideLoading() {
                const spinner = document.getElementById('loadingSpinner');
                if (spinner) spinner.classList.remove('active');
            }

            function showToast(message, type = 'success') {
                console.log(`${type}: ${message}`);
                // Create a simple toast notification
                const toastContainer = document.querySelector('.toast-container') || createToastContainer();
                const toast = createToast(message, type);
                toastContainer.appendChild(toast);

                if (typeof bootstrap !== 'undefined' && bootstrap.Toast) {
                    const bsToast = new bootstrap.Toast(toast);
                    bsToast.show();
                }

                setTimeout(() => toast.remove(), 5000);
            }

            function createToastContainer() {
                const container = document.createElement('div');
                container.className = 'toast-container position-fixed bottom-0 end-0 p-3';
                container.style.zIndex = '9999';
                document.body.appendChild(container);
                return container;
            }

            function createToast(message, type) {
                const toast = document.createElement('div');
                toast.className = `toast align-items-center text-white bg-${type} border-0`;
                toast.innerHTML = `
                    <div class="d-flex">
                        <div class="toast-body">${message}</div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                    </div>
                `;
                return toast;
            }

            function safeSetValue(elementId, value) {
                const element = document.getElementById(elementId);
                if (element) {
                    element.value = value || '';
                }
            }

            function safeSetSelect(elementId, value) {
                const select = document.getElementById(elementId);
                if (select && value !== undefined && value !== null) {
                    const option = Array.from(select.options).find(opt =>
                        opt.value.toLowerCase() === value.toString().toLowerCase()
                    );
                    if (option) {
                        select.value = option.value;
                    }
                }
            }

            // Initialize DataTable only if table exists
            let runsTable = null;
            const tableElement = document.getElementById('runsTable');

            if (tableElement && tableElement.querySelector('tbody tr')) {
                runsTable = $('#runsTable').DataTable({
                    responsive: true,
                    lengthMenu: [[10, 25, 50, -1], [10, 25, 50, "All"]],
                    dom: '<"row"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6"f>>rtip',
                    language: {
                        search: "_INPUT_",
                        searchPlaceholder: "Search runs...",
                        lengthMenu: "Show _MENU_ runs per page",
                        info: "Showing _START_ to _END_ of _TOTAL_ runs",
                        infoEmpty: "Showing 0 to 0 of 0 runs",
                        infoFiltered: "(filtered from _MAX_ total runs)"
                    },
                    columnDefs: [
                        { className: "align-middle", targets: "_all" },
                        { orderable: false, targets: [5] }
                    ],
                    order: [[1, 'asc']]
                });

                // Initialize filters
                initializeFilters();
            }

            // Function to populate court dropdown
            function populateCourtDropdown(courtList, selectedCourtId = null) {
                const courtSelect = document.getElementById('editCourtList');
                if (!courtSelect) return;

                courtSelect.classList.add('court-dropdown-loading');
                courtSelect.disabled = true;
                courtSelect.innerHTML = '<option value="">Loading courts...</option>';

                setTimeout(() => {
                    courtSelect.innerHTML = '<option value="">Select a court...</option>';

                    if (courtList && courtList.length > 0) {
                        courtList.forEach(court => {
                            const option = document.createElement('option');
                            option.value = court.courtId;
                            option.textContent = court.name;

                            if (selectedCourtId && court.courtId === selectedCourtId) {
                                option.selected = true;
                            }

                            courtSelect.appendChild(option);
                        });
                    } else {
                        const noOption = document.createElement('option');
                        noOption.value = '';
                        noOption.textContent = 'No courts available';
                        noOption.disabled = true;
                        courtSelect.appendChild(noOption);
                    }

                    courtSelect.classList.remove('court-dropdown-loading');
                    courtSelect.disabled = false;
                }, 300);
            }

            // Set minimum date for date pickers
            const today = new Date().toISOString().split('T')[0];
            const dateInputs = document.querySelectorAll('input[type="date"]');
            dateInputs.forEach(input => {
                input.min = today;
            });

            // Handle edit run modal
            const editRunModal = document.getElementById('editRunModal');
            if (editRunModal) {
                editRunModal.addEventListener('show.bs.modal', function(event) {
                    const button = event.relatedTarget;
                    const runId = button.getAttribute('data-run-id');

                    if (!runId) {
                        console.error('No run ID found');
                        return;
                    }

                    safeSetValue('editRunId', runId);
                    showLoading();

                    // Load run data
                    fetch(`/Run/GetRunData?id=${runId}`)
                        .then(response => {
                            console.log('Response status:', response.status);
                            if (!response.ok) {
                                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                            }
                            return response.text().then(text => {
                                try {
                                    return JSON.parse(text);
                                } catch (e) {
                                    console.error('Invalid JSON response:', text);
                                    throw new Error('Invalid JSON response from server');
                                }
                            });
                        })
                        .then(data => {
                            console.log('Received data:', data);
                            hideLoading();

                            if (data.success === false) {
                                throw new Error(data.message || 'Failed to load run data');
                            }

                            // Populate form fields with null safety
                            safeSetValue('editRunTitle', data.name);
                            safeSetValue('editRunDate', data.runDate);
                            safeSetValue('editRunTime', data.startTime);
                            safeSetValue('editEndTime', data.endTime);
                            safeSetValue('editAddress', data.address);
                            safeSetValue('editCity', data.city);
                            safeSetValue('editState', data.state);
                            safeSetValue('editZip', data.zip);
                            safeSetValue('editMaxParticipants', data.playerLimit);
                            safeSetValue('editRunDescription', data.description);
                            safeSetValue('editClientId', data.clientId);
                            safeSetValue('editProfileId', data.profileId);

                            // Set select values with validation
                            safeSetSelect('editCourtType', data.isOutdoor ? 'true' : 'false');
                            safeSetSelect('editSkillLevel', data.skillLevel);
                            safeSetSelect('editIsPublic', data.isPublic ? 'true' : 'false');
                            safeSetSelect('editStatus', data.status);
                            safeSetSelect('editRunType', data.type);
                            safeSetSelect('editTeamType', data.teamType);

                            // Populate court dropdown
                            populateCourtDropdown(data.courtList || [], data.courtId);

                            // Update participant counts with validation
                            const currentCount = document.getElementById('currentParticipantsCount');
                            const maxCount = document.getElementById('maxParticipantsCount');
                            if (currentCount) currentCount.textContent = data.playerCount || 0;
                            if (maxCount) maxCount.textContent = data.playerLimit || 0;

                            // Set delete button run ID
                            safeSetValue('deleteRunId', data.runId || runId);

                            // Load participants
                            loadParticipants(data.runId || runId);

                            console.log('Run data loaded successfully');
                        })
                        .catch(error => {
                            hideLoading();
                            console.error('Detailed error loading run data:', {
                                error: error,
                                message: error.message,
                                stack: error.stack,
                                runId: runId
                            });
                            showToast(`Error loading run data: ${error.message}`, 'danger');
                        });
                });
            }

            // Handle delete run button
            const deleteRunBtn = document.getElementById('deleteRunBtn');
            if (deleteRunBtn) {
                deleteRunBtn.addEventListener('click', function() {
                    const runId = document.getElementById('editRunId').value;
                    safeSetValue('deleteRunId', runId);

                    const editModal = bootstrap.Modal.getInstance(document.getElementById('editRunModal'));
                    if (editModal) editModal.hide();

                    const deleteModal = new bootstrap.Modal(document.getElementById('deleteRunModal'));
                    deleteModal.show();
                });
            }

            // Function to load participants
                    function loadRunDataEnhanced(runId) {
            console.log('🔄 Loading run data for ID:', runId);

            if (!runId) {
                console.error('❌ No run ID provided');
                hideLoading();
                return;
            }

            showLoading();

            fetch(`/Run/GetRunData?id=${runId}`)
                .then(response => {
                    console.log('📡 API Response status:', response.status);

                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    hideLoading();
                    console.log('📦 Received data:', data);

                    if (data.success === false) {
                        console.error('❌ API returned error:', data.message);
                        showToast('Error loading run data: ' + (data.message || 'Unknown error'), 'error');
                        return;
                    }

                    // Populate form fields with safe value assignment
                    const setFieldValue = (fieldId, value) => {
                        const field = document.getElementById(fieldId);
                        if (field && value !== null && value !== undefined) {
                            field.value = value;
                            console.log(`✅ Set ${fieldId} to: ${value}`);
                        } else if (!field) {
                            console.warn(`⚠️ Field ${fieldId} not found`);
                        }
                    };

                    // Basic run information
                    setFieldValue('editRunTitle', data.name || '');
                    setFieldValue('editRunDescription', data.description || '');

                    // Date handling with validation
                    if (data.runDate) {
                        try {
                            const date = new Date(data.runDate);
                            if (!isNaN(date.getTime())) {
                                setFieldValue('editRunDate', data.runDate);
                            }
                        } catch (e) {
                            console.warn('⚠️ Invalid run date format:', data.runDate);
                        }
                    }

                    // Time handling with validation
                    if (data.startTime) {
                        try {
                            // Handle different time formats
                            let timeValue = data.startTime;

                            // If it's in format "hh:mm:ss", convert to "hh:mm"
                            if (timeValue.includes(':')) {
                                const timeParts = timeValue.split(':');
                                if (timeParts.length >= 2) {
                                    timeValue = `${timeParts[0]}:${timeParts[1]}`;
                                }
                            }

                            setFieldValue('editRunTime', timeValue);
                        } catch (e) {
                            console.warn('⚠️ Invalid start time format:', data.startTime);
                        }
                    }

                    if (data.endTime) {
                        try {
                            let timeValue = data.endTime;

                            // If it's in format "hh:mm:ss", convert to "hh:mm"
                            if (timeValue.includes(':')) {
                                const timeParts = timeValue.split(':');
                                if (timeParts.length >= 2) {
                                    timeValue = `${timeParts[0]}:${timeParts[1]}`;
                                }
                            }

                            setFieldValue('editEndTime', timeValue);
                        } catch (e) {
                            console.warn('⚠️ Invalid end time format:', data.endTime);
                        }
                    }

                    // Numeric fields with validation
                    const setNumericField = (fieldId, value, defaultValue = 0) => {
                        const field = document.getElementById(fieldId);
                        if (field) {
                            const numValue = parseInt(value) || defaultValue;
                            field.value = numValue;
                            console.log(`✅ Set ${fieldId} to: ${numValue}`);
                        }
                    };

                    setNumericField('editMaxParticipants', data.playerLimit, 10);

                    // Select fields with validation
                    const setSelectField = (fieldId, value, defaultValue = '') => {
                        const select = document.getElementById(fieldId);
                        if (select && value) {
                            // Try to find matching option
                            for (let i = 0; i < select.options.length; i++) {
                                if (select.options[i].value.toLowerCase() === value.toLowerCase()) {
                                    select.selectedIndex = i;
                                    console.log(`✅ Set ${fieldId} to: ${value}`);
                                    return;
                                }
                            }
                            console.warn(`⚠️ Option '${value}' not found for ${fieldId}`);
                        } else if (!select) {
                            console.warn(`⚠️ Select field ${fieldId} not found`);
                        }
                    };

                    setSelectField('editSkillLevel', data.skillLevel, 'Intermediate');
                    setSelectField('editStatus', data.status, 'Active');
                    setSelectField('editRunType', data.type, 'Pickup');
                    setSelectField('editTeamType', data.teamType, 'Individual');
                    setSelectField('editIsPublic', data.isPublic ? 'true' : 'false', 'true');

                    // Court dropdown population with error handling
                    console.log('🏀 Court data received:', data.courtList);
                    console.log('🏀 Current court ID:', data.courtId);

                    try {
                        populateCourtDropdown(data.courtList || [], data.courtId);
                    } catch (e) {
                        console.error('❌ Error populating court dropdown:', e);
                        const courtSelect = document.getElementById('editCourtList');
                        if (courtSelect) {
                            courtSelect.innerHTML = '<option value="">Error loading courts</option>';
                        }
                    }

                    // Update participant counts with validation
                    const updateParticipantCount = (elementId, count, defaultValue = 0) => {
                        const element = document.getElementById(elementId);
                        if (element) {
                            const numCount = parseInt(count) || defaultValue;
                            element.textContent = numCount;
                            console.log(`✅ Updated ${elementId} to: ${numCount}`);
                        }
                    };

                    updateParticipantCount('currentParticipantsCount', data.playerCount, 0);
                    updateParticipantCount('maxParticipantsCount', data.playerLimit, 0);

                    // Set delete button run ID
                    const deleteIdField = document.getElementById('deleteRunId');
                    if (deleteIdField) {
                        deleteIdField.value = data.runId || runId;
                    }

                    // Load participants
                    try {
                        loadParticipants(data.runId || runId);
                    } catch (e) {
                        console.error('❌ Error loading participants:', e);
                    }

                    console.log('✅ Run data loaded successfully');
                })
                .catch(error => {
                    hideLoading();
                    console.error('❌ Detailed error loading run data:', {
                        error: error,
                        message: error.message,
                        stack: error.stack,
                        runId: runId
                    });
                    showToast('Error loading run data: ' + error.message, 'error');
                });
        }

            // Function to remove participant
            function removeParticipant(runId, participantId) {
                showLoading();

                fetch('/Run/RemoveParticipant', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken()
                    },
                    body: JSON.stringify({ runId: runId, profileId: participantId })
                })
                .then(response => {
                    if (!response.ok) throw new Error('Network response was not ok');
                    return response.json();
                })
                .then(data => {
                    hideLoading();
                    if (data.success) {
                        loadParticipants(runId);
                        const currentCount = document.getElementById('currentParticipantsCount');
                        if (currentCount) {
                            const count = parseInt(currentCount.textContent);
                            currentCount.textContent = Math.max(0, count - 1);
                        }
                        showToast('Participant removed successfully');
                    } else {
                        showToast('Error removing participant: ' + (data.message || 'Unknown error'), 'danger');
                    }
                })
                .catch(error => {
                    hideLoading();
                    console.error('Error removing participant:', error);
                    showToast('Error removing participant. Please try again.', 'danger');
                });
            }

            // Add participant button
            const addParticipantBtn = document.getElementById('addParticipantBtn');
            if (addParticipantBtn) {
                addParticipantBtn.addEventListener('click', function() {
                    const runId = document.getElementById('editRunId').value;
                    const currentCountEl = document.getElementById('currentParticipantsCount');
                    const maxCountEl = document.getElementById('maxParticipantsCount');

                    if (!currentCountEl || !maxCountEl) {
                        showToast('Unable to determine current capacity. Please refresh and try again.', 'danger');
                        return;
                    }

                    const currentCount = parseInt(currentCountEl.textContent);
                    const maxCount = parseInt(maxCountEl.textContent);

                    if (currentCount >= maxCount) {
                        showToast('This run is already at maximum capacity. Cannot add more participants.', 'danger');
                        return;
                    }

                    const profileId = prompt('Enter participant profile ID:');
                    if (!profileId) return;

                    showLoading();

                    fetch('/Run/AddParticipant', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': getAntiForgeryToken()
                        },
                        body: JSON.stringify({ runId: runId, profileId: profileId })
                    })
                    .then(response => {
                        if (!response.ok) throw new Error('Network response was not ok');
                        return response.json();
                    })
                    .then(data => {
                        hideLoading();
                        if (data.success) {
                            loadParticipants(runId);
                            const currentCount = parseInt(currentCountEl.textContent);
                            currentCountEl.textContent = currentCount + 1;
                            showToast('Participant added successfully');
                        } else {
                            showToast('Error adding participant: ' + (data.message || 'Unknown error'), 'danger');
                        }
                    })
                    .catch(error => {
                        hideLoading();
                        console.error('Error adding participant:', error);
                        showToast('Error adding participant. Please try again.', 'danger');
                    });
                });
            }

            // Initialize filters
            function initializeFilters() {
                if (!runsTable) return;

                const statusFilter = document.getElementById('statusFilter');
                const dateFilter = document.getElementById('dateFilter');
                const locationFilter = document.getElementById('locationFilter');
                const typeFilter = document.getElementById('typeFilter');
                const resetFiltersBtn = document.getElementById('resetFilters');
                const activeFiltersContainer = document.getElementById('activeFilters');

                function applyFilters() {
                    // Clear existing custom search functions
                    if ($.fn.dataTable.ext.search.length > 0) {
                        $.fn.dataTable.ext.search.pop();
                    }

                    $.fn.dataTable.ext.search.push(function(settings, data, dataIndex) {
                        if (!runsTable || settings.nTable.id !== 'runsTable') return true;

                        // If all filters are set to 'all', show all rows
                        if (statusFilter.value === 'all' &&
                            dateFilter.value === 'all' &&
                            locationFilter.value === 'all' &&
                            typeFilter.value === 'all') {
                            return true;
                        }

                        const row = runsTable.row(dataIndex).node();

                        // Status filter
                        if (statusFilter.value !== 'all') {
                            const status = data[4].toLowerCase();
                            const statusValue = statusFilter.value.toLowerCase();

                            if (statusValue === 'upcoming' && !status.includes('upcoming')) return false;
                            if (statusValue === 'almost-full' && !status.includes('almost full')) return false;
                            if (statusValue === 'past' && !status.includes('past')) return false;
                        }

                        // Date filter
                        if (dateFilter.value !== 'all') {
                            const runDate = row.getAttribute('data-run-date');
                            if (!runDate) return false;

                            const date = new Date(runDate);
                            const today = new Date();
                            today.setHours(0, 0, 0, 0);

                            const tomorrow = new Date(today);
                            tomorrow.setDate(tomorrow.getDate() + 1);

                            const endOfWeek = new Date(today);
                            endOfWeek.setDate(endOfWeek.getDate() + 7);

                            switch (dateFilter.value) {
                                case 'today':
                                    if (date < today || date >= tomorrow) return false;
                                    break;
                                case 'this-week':
                                    if (date < today || date > endOfWeek) return false;
                                    break;
                                case 'upcoming':
                                    if (date < today) return false;
                                    break;
                                case 'past':
                                    if (date >= today) return false;
                                    break;
                            }
                        }

                        // Location filter
                        if (locationFilter.value !== 'all') {
                            const location = row.getAttribute('data-location') || '';
                            if (!location.includes(locationFilter.value)) return false;
                        }

                        // Type filter
                        if (typeFilter.value !== 'all') {
                            const runType = row.getAttribute('data-run-type');
                            if (runType !== typeFilter.value) return false;
                        }

                        return true;
                    });

                    runsTable.draw();
                    updateActiveFilters();
                }

                function updateActiveFilters() {
                    // Remove existing filter badges
                    const existingBadges = activeFiltersContainer.querySelectorAll('.filter-badge, .filter-none');
                    existingBadges.forEach(badge => badge.remove());

                    const hasActiveFilters =
                        statusFilter.value !== 'all' ||
                        dateFilter.value !== 'all' ||
                        locationFilter.value !== 'all' ||
                        typeFilter.value !== 'all';

                    if (!hasActiveFilters) {
                        const noneSpan = document.createElement('span');
                        noneSpan.className = 'text-muted filter-none';
                        noneSpan.textContent = 'None';
                        activeFiltersContainer.appendChild(noneSpan);
                        return;
                    }

                    if (statusFilter.value !== 'all') {
                        addFilterBadge('Status', formatFilterValue(statusFilter.value), function() {
                            statusFilter.value = 'all';
                            applyFilters();
                        });
                    }

                    if (dateFilter.value !== 'all') {
                        addFilterBadge('Date', formatFilterValue(dateFilter.value), function() {
                            dateFilter.value = 'all';
                            applyFilters();
                        });
                    }

                    if (locationFilter.value !== 'all') {
                        addFilterBadge('Location', locationFilter.value, function() {
                            locationFilter.value = 'all';
                            applyFilters();
                        });
                    }

                    if (typeFilter.value !== 'all') {
                        addFilterBadge('Type', formatFilterValue(typeFilter.value), function() {
                            typeFilter.value = 'all';
                            applyFilters();
                        });
                    }
                }

                function formatFilterValue(value) {
                    return value
                        .split('-')
                        .map(word => word.charAt(0).toUpperCase() + word.slice(1))
                        .join(' ');
                }

                function addFilterBadge(label, value, removeCallback) {
                    const badge = document.createElement('span');
                    badge.className = 'badge bg-primary me-2 filter-badge';
                    badge.textContent = `${label}: ${value}`;

                    const removeBtn = document.createElement('button');
                    removeBtn.className = 'btn-close btn-close-white ms-1';
                    removeBtn.style.fontSize = '0.5rem';
                    removeBtn.addEventListener('click', removeCallback);

                    badge.appendChild(removeBtn);
                    activeFiltersContainer.appendChild(badge);
                }

                // Add event listeners for filters
                if (statusFilter) statusFilter.addEventListener('change', applyFilters);
                if (dateFilter) dateFilter.addEventListener('change', applyFilters);
                if (locationFilter) locationFilter.addEventListener('change', applyFilters);
                if (typeFilter) typeFilter.addEventListener('change', applyFilters);

                if (resetFiltersBtn) {
                    resetFiltersBtn.addEventListener('click', function() {
                        statusFilter.value = 'all';
                        dateFilter.value = 'all';
                        locationFilter.value = 'all';
                        typeFilter.value = 'all';
                        applyFilters();
                    });
                }

                // Initialize filters
                applyFilters();
            }

            // Form validation for add run form
            const addRunForm = document.getElementById('addRunForm');
            if (addRunForm) {
                addRunForm.addEventListener('submit', function(e) {
                    const runDate = document.getElementById('runDate').value;
                    const runTime = document.getElementById('runTime').value;

                    if (runDate && runTime) {
                        const selectedDateTime = new Date(`${runDate}T${runTime}`);
                        const now = new Date();

                        if (selectedDateTime <= now) {
                            e.preventDefault();
                            showToast('Run date and time must be in the future.', 'danger');
                            return;
                        }
                    }
                });
            }

            // Form validation for edit run form
            const editRunForm = document.getElementById('editRunForm');
            if (editRunForm) {
                editRunForm.addEventListener('submit', function(e) {
                    const runDate = document.getElementById('editRunDate').value;
                    const runTime = document.getElementById('editRunTime').value;

                    if (runDate && runTime) {
                        const selectedDateTime = new Date(`${runDate}T${runTime}`);
                        const now = new Date();

                        if (selectedDateTime <= now) {
                            e.preventDefault();
                            showToast('Run date and time must be in the future.', 'danger');
                            return;
                        }
                    }
                });
            }
        });
    </script>
}