@model Website.ViewModels.ProductsViewModel

@{
    ViewData["Title"] = "Products";
    var userType = ViewData["UserType"]?.ToString() ?? "Coach";
}

@section Styles {
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/dataTables.bootstrap5.min.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/responsive/2.2.9/css/responsive.bootstrap5.min.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/buttons/2.2.2/css/buttons.bootstrap5.min.css">
    <link rel="stylesheet" type="text/css" href="~/css/management.css">
    <style>
        .product-image {
            width: 36px;
            height: 36px;
            object-fit: cover;
            border-radius: 50%;
        }
        .product-initials {
            width: 36px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: var(--bs-primary);
            color: white;
            border-radius: 50%;
            font-weight: bold;
            font-size: 14px;
        }
        .table-actions {
            white-space: nowrap;
        }
        .action-icon {
            width: 32px;
            height: 32px;
            padding: 0;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            margin: 0 2px;
        }
        .no-products-message {
            text-align: center;
            padding: 3rem 1rem;
        }
        .filter-badge {
            display: inline-block;
            margin: 2px;
        }
        .skill-rating-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 8px;
        }
        .skill-rating-label {
            font-weight: 500;
        }
        .skill-rating-value {
            background: var(--bs-primary);
            color: white;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 600;
        }
        .price-display {
            font-weight: 600;
            color: var(--bs-success);
        }
        .points-badge {
            background: var(--bs-warning);
            color: var(--bs-dark);
            padding: 2px 6px;
            border-radius: 8px;
            font-size: 11px;
            font-weight: 600;
        }
    </style>
}

<div class="dashboard-header">
    <div class="container">
        <h1>Products</h1>
        <p class="lead">Manage products, view details, and inventory</p>
    </div>
</div>

<div class="container">
    <!-- Back button to dashboard -->
    <div class="back-button mb-3">
        <a href="@Url.Action("Dashboard", "Dashboard")" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left me-2"></i>Back to Dashboard
        </a>
    </div>

    <!-- Product Filters -->
    <div class="mb-4">
        <div class="card shadow-sm">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h5 class="mb-0">Filter Products</h5>
                    <button class="btn btn-sm btn-outline-secondary" id="resetFilters">
                        <i class="bi bi-arrow-counterclockwise me-1"></i>
                        Reset Filters
                    </button>
                </div>

                <div class="row g-3">
                    <div class="col-md-3">
                        <label for="statusFilter" class="form-label">Status</label>
                        <select class="form-select" id="statusFilter">
                            <option value="all" selected>All Statuses</option>
                            <option value="active">Active</option>
                            <option value="inactive">Inactive</option>
                            <option value="discontinued">Discontinued</option>
                        </select>
                    </div>

                    <div class="col-md-3">
                        <label for="categoryFilter" class="form-label">Category</label>
                        <select class="form-select" id="categoryFilter">
                            <option value="all" selected>All Categories</option>
                            <option value="clothing">Clothing</option>
                            <option value="equipment">Equipment</option>
                            <option value="accessories">Accessories</option>
                            <option value="footwear">Footwear</option>
                        </select>
                    </div>

                    <div class="col-md-3">
                        <label for="typeFilter" class="form-label">Type</label>
                        <select class="form-select" id="typeFilter">
                            <option value="all" selected>All Types</option>
                            <option value="clothing">Clothing</option>
                            <option value="equipment">Equipment</option>
                            <option value="accessories">Accessories</option>
                        </select>
                    </div>

                    <div class="col-md-3">
                        <label for="priceRangeFilter" class="form-label">Price Range</label>
                        <select class="form-select" id="priceRangeFilter">
                            <option value="all" selected>All Prices</option>
                            <option value="0-25">$0 - $25</option>
                            <option value="25-50">$25 - $50</option>
                            <option value="50-100">$50 - $100</option>
                            <option value="100+">$100+</option>
                        </select>
                    </div>
                </div>

                <div class="row mt-3">
                    <div class="col-md-6">
                        <label for="searchFilter" class="form-label">Search</label>
                        <input type="text" class="form-control" id="searchFilter" placeholder="Search by title, description, or product number...">
                    </div>
                </div>

                <div class="mt-3" id="activeFilters">
                    <span class="badge bg-secondary me-2">Active Filters:</span>
                    <span class="text-muted filter-none">None</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Action Buttons -->
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="d-flex align-items-center">
                <span class="text-muted me-2">Total Products:</span>
                <span class="badge bg-info" id="totalProductsCount">
                    @(Model?.ProductList?.Count ?? 0)
                </span>
            </div>
        </div>
        <div class="col-md-6 text-end">
            <button type="button" class="btn btn-outline-primary me-2" id="exportBtn">
                <i class="bi bi-download me-2"></i>Export
            </button>
            <button type="button" class="btn btn-orange" data-bs-toggle="modal" data-bs-target="#addProductModal">
                <i class="bi bi-plus-circle me-2"></i>Add Product
            </button>
        </div>
    </div>

    <!-- DataTable -->
    @if (Model?.ProductList != null && Model.ProductList.Any())
    {
        <div class="card shadow-sm">
            <div class="card-body">
                <table id="productsTable" class="table table-striped table-hover w-100">
                    <thead>
                        <tr>
                            <th>Product</th>
                            <th>Price</th>
                            <th>Points</th>
                            <th>Status</th>
                            <th>Category</th>
                            <th>Type</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in Model.ProductList)
                        {
                            <tr data-status="@(product.Product.Status?.ToLower() ?? "active")" 
                                data-category="@(product.Product.Category?.ToLower() ?? "")" 
                                data-type="@(product.Product.Type?.ToLower() ?? "")"
                                data-price="@(product.Product.Price ?? 0)">
                                <td>
                                    <div class="d-flex align-items-center">
                                        @if (!string.IsNullOrEmpty(product.Product.ImageURL))
                                        {
                                            <img src="@product.Product.ImageURL" alt="@product.Title" class="product-image me-2" 
                                                 onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                                            <div class="product-initials me-2" style="display: none;">
                                                <span>@(product.Product.Title?.Substring(0, 1).ToUpper() ?? "P")</span>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="product-initials me-2">
                                                <span>@(product.Product.Title?.Substring(0, 1).ToUpper() ?? "P")</span>
                                            </div>
                                        }
                                        <div>
                                            <div class="fw-bold">@(product.Product.Title ?? "Untitled Product")</div>
                                            <small class="text-muted">
                                                @if (!string.IsNullOrEmpty(product.Product.ProductNumber))
                                                {
                                                    <span>SKU: @product.Product.ProductNumber</span>
                                                }
                                                @if (!string.IsNullOrEmpty(product.Product.Tag))
                                                {
                                                    <span class="ms-2 badge bg-light text-dark">@product.Tag</span>
                                                }
                                            </small>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <span class="price-display">$@(product.Product.Price?.ToString("F2") ?? "0.00")</span>
                                </td>
                                <td>
                                    @if (product.Points.HasValue && product.Product.Points.Value > 0)
                                    {
                                        <span class="points-badge">@product.Product.Points pts</span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">-</span>
                                    }
                                </td>
                                <td>
                                    @{
                                        var statusClass = (product.Status?.ToLower()) switch
                                        {
                                            "active" => "bg-success",
                                            "inactive" => "bg-warning",
                                            "discontinued" => "bg-danger",
                                            _ => "bg-secondary"
                                        };
                                    }
                                    <span class="badge @statusClass">@(product.Product.Status ?? "Active")</span>
                                </td>
                                <td>@(product.Product.Category ?? "N/A")</td>
                                <td>@(product.Product.Type ?? "N/A")</td>
                                <td>
                                    <div class="table-actions">
                                        <button type="button" class="btn btn-sm btn-outline-primary action-icon" 
                                                data-bs-toggle="modal" data-bs-target="#editProductModal" 
                                                data-product-id="@product.Product.ProductId" title="Edit Product">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        <a href="@Url.Action("Details", "Product", new { id = product.Product.ProductId })" 
                                           class="btn btn-sm btn-primary action-icon" title="View Details">
                                            <i class="bi bi-eye"></i>
                                        </a>
                                        <button type="button" class="btn btn-sm btn-outline-info action-icon" 
                                                onclick="duplicateProduct('@product.Product.ProductId')" title="Duplicate">
                                            <i class="bi bi-files"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else
    {
        <div class="no-products-message">
            <i class="bi bi-box" style="font-size: 4rem; color: var(--bs-secondary);"></i>
            <h3 class="mt-3 mb-2">No Products Found</h3>
            <p class="text-muted mb-4">There are no products available at the moment. Add a new product to get started!</p>
            <button type="button" class="btn btn-orange btn-lg" data-bs-toggle="modal" data-bs-target="#addProductModal">
                <i class="bi bi-plus-circle me-2"></i>Add Your First Product
            </button>
        </div>
    }
</div>

<!-- Add Product Modal -->
<div class="modal fade" id="addProductModal" tabindex="-1" aria-labelledby="addProductModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="addProductModalLabel">
                    <i class="bi bi-plus-circle me-2"></i>Add New Product
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="addProductForm" method="post" action="@Url.Action("Create", "Product")" enctype="multipart/form-data">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-8">
                            <label for="addTitle" class="form-label">Product Title <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="addTitle" name="Title" required 
                                   placeholder="Enter product title">
                        </div>
                        <div class="col-md-4">
                            <label for="addProductNumber" class="form-label">SKU/Product Number</label>
                            <input type="text" class="form-control" id="addProductNumber" name="ProductNumber" 
                                   placeholder="SKU123">
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-12">
                            <label for="addDescription" class="form-label">Description</label>
                            <textarea class="form-control" id="addDescription" name="Description" rows="3" 
                                      placeholder="Enter product description..."></textarea>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="addPrice" class="form-label">Price <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" step="0.01" min="0" class="form-control" id="addPrice" 
                                       name="Price" required placeholder="0.00">
                            </div>
                        </div>
                        <div class="col-md-4">
                            <label for="addPoints" class="form-label">Reward Points</label>
                            <input type="number" min="0" class="form-control" id="addPoints" name="Points" 
                                   placeholder="0">
                        </div>
                        <div class="col-md-4">
                            <label for="addTag" class="form-label">Tag</label>
                            <input type="text" class="form-control" id="addTag" name="Tag" 
                                   placeholder="NEW, SALE, etc.">
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="addType" class="form-label">Type <span class="text-danger">*</span></label>
                            <select class="form-select" id="addType" name="Type" required>
                                <option value="">Select Type</option>
                                <option value="Clothing">Clothing</option>
                                <option value="Equipment">Equipment</option>
                                <option value="Accessories">Accessories</option>
                                <option value="Footwear">Footwear</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="addCategory" class="form-label">Category <span class="text-danger">*</span></label>
                            <select class="form-select" id="addCategory" name="Category" required>
                                <option value="">Select Category</option>
                                <option value="Clothing">Clothing</option>
                                <option value="Equipment">Equipment</option>
                                <option value="Accessories">Accessories</option>
                                <option value="Footwear">Footwear</option>
                            </select>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-12">
                            <label for="addImageURL" class="form-label">Image URL</label>
                            <input type="url" class="form-control" id="addImageURL" name="ImageURL" 
                                   placeholder="https://example.com/image.jpg">
                            <div class="form-text">Provide a direct link to the product image</div>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-12">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="addFeatured" name="Featured">
                                <label class="form-check-label" for="addFeatured">
                                    Featured Product
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                        <i class="bi bi-x-circle me-1"></i>Cancel
                    </button>
                    <button type="submit" class="btn btn-orange">
                        <i class="bi bi-check-circle me-1"></i>Add Product
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Product Modal -->
<div class="modal fade" id="editProductModal" tabindex="-1" aria-labelledby="editProductModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title" id="editProductModalLabel">
                    <i class="bi bi-pencil-square me-2"></i>Edit Product
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="editProductForm" method="post" action="@Url.Action("Edit", "Product")">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <input type="hidden" id="editProductId" name="ProductId" value="" />
                    
                    <div class="row mb-3">
                        <div class="col-md-8">
                            <label for="editTitle" class="form-label">Product Title <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="editTitle" name="Title" required>
                        </div>
                        <div class="col-md-4">
                            <label for="editProductNumber" class="form-label">SKU/Product Number</label>
                            <input type="text" class="form-control" id="editProductNumber" name="ProductNumber">
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-12">
                            <label for="editDescription" class="form-label">Description</label>
                            <textarea class="form-control" id="editDescription" name="Description" rows="3"></textarea>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="editPrice" class="form-label">Price <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" step="0.01" min="0" class="form-control" id="editPrice" name="Price" required>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <label for="editPoints" class="form-label">Reward Points</label>
                            <input type="number" min="0" class="form-control" id="editPoints" name="Points">
                        </div>
                        <div class="col-md-4">
                            <label for="editTag" class="form-label">Tag</label>
                            <input type="text" class="form-control" id="editTag" name="Tag">
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="editType" class="form-label">Type <span class="text-danger">*</span></label>
                            <select class="form-select" id="editType" name="Type" required>
                                <option value="">Select Type</option>
                                <option value="Clothing">Clothing</option>
                                <option value="Equipment">Equipment</option>
                                <option value="Accessories">Accessories</option>
                                <option value="Footwear">Footwear</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label for="editCategory" class="form-label">Category <span class="text-danger">*</span></label>
                            <select class="form-select" id="editCategory" name="Category" required>
                                <option value="">Select Category</option>
                                <option value="Clothing">Clothing</option>
                                <option value="Equipment">Equipment</option>
                                <option value="Accessories">Accessories</option>
                                <option value="Footwear">Footwear</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label for="editStatus" class="form-label">Status</label>
                            <select class="form-select" id="editStatus" name="Status">
                                <option value="Active">Active</option>
                                <option value="Inactive">Inactive</option>
                                <option value="Discontinued">Discontinued</option>
                            </select>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-12">
                            <label for="editImageURL" class="form-label">Image URL</label>
                            <input type="url" class="form-control" id="editImageURL" name="ImageURL">
                            <div class="form-text">Provide a direct link to the product image</div>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="editFeatured" name="Featured">
                                <label class="form-check-label" for="editFeatured">
                                    Featured Product
                                </label>
                            </div>
                        </div>
                        <div class="col-md-6 text-end">
                            <small class="text-muted">
                                Product ID: <span id="displayProductId">-</span>
                            </small>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                        <i class="bi bi-x-circle me-1"></i>Cancel
                    </button>
                    <button type="button" class="btn btn-danger me-auto" id="deleteProductBtn">
                        <i class="bi bi-trash me-1"></i>Delete Product
                    </button>
                    <button type="submit" class="btn btn-warning">
                        <i class="bi bi-check-circle me-1"></i>Save Changes
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Product Confirmation Modal -->
<div class="modal fade" id="deleteProductModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">
                    <i class="bi bi-exclamation-triangle me-2"></i>Confirm Deletion
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="text-center mb-3">
                    <i class="bi bi-trash" style="font-size: 3rem; color: var(--bs-danger);"></i>
                </div>
                <p class="text-center"><strong>Are you sure you want to delete this product?</strong></p>
                <p class="text-center text-muted">This action cannot be undone.</p>
                <div class="alert alert-warning">
                    <i class="bi bi-exclamation-circle me-2"></i>
                    <strong>Warning:</strong> All related data for this product will be permanently deleted.
                </div>
                <div class="product-info bg-light p-3 rounded">
                    <div class="d-flex align-items-center">
                        <div class="product-initials me-3" id="deleteProductImage">
                            <span id="deleteProductInitials">P</span>
                        </div>
                        <div>
                            <div class="fw-bold" id="deleteProductTitle">Product Title</div>
                            <small class="text-muted" id="deleteProductNumber">SKU123</small>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle me-1"></i>Cancel
                </button>
                <form id="deleteProductForm" method="post" action="@Url.Action("Delete", "Product")" class="d-inline">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="deleteProductId" name="id" value="" />
                    <button type="submit" class="btn btn-danger">
                        <i class="bi bi-trash me-1"></i>Delete Product
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Toast Container for Notifications -->
<div class="toast-container position-fixed bottom-0 end-0 p-3" id="toastContainer"></div>

@section Scripts {
    <script type="text/javascript" src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/1.11.5/js/dataTables.bootstrap5.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/responsive/2.2.9/js/dataTables.responsive.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/responsive/2.2.9/js/responsive.bootstrap5.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/buttons/2.2.2/js/dataTables.buttons.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/buttons/2.2.2/js/buttons.bootstrap5.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/buttons/2.2.2/js/buttons.html5.min.js"></script>
    <script>
        // Global variables
        window.appUrls = {
            getProductData: '@Url.Action("GetProductData", "Product")',
            editProduct: '@Url.Action("Edit", "Product")',
            deleteProduct: '@Url.Action("Delete", "Product")',
            duplicateProduct: '@Url.Action("Duplicate", "Product")',
            exportProducts: '@Url.Action("Export", "Product")'
        };

        let productsTable;
        let currentFilters = {
            status: 'all',
            category: 'all',
            type: 'all',
            priceRange: 'all',
            search: ''
        };

        $(document).ready(function() {
            initializeDataTable();
            initializeFilters();
            initializeModals();
            initializeEventHandlers();
        });

        function initializeDataTable() {
            productsTable = $('#productsTable').DataTable({
                responsive: true,
                pageLength: 25,
                order: [[0, 'asc']],
                columnDefs: [
                    { orderable: false, targets: [6] }, // Actions column
                    { responsivePriority: 1, targets: [0, 6] }, // Product name and actions always visible
                    { responsivePriority: 2, targets: [1, 3] } // Price and status high priority
                ],
                dom: '<"row"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6"f>>rtip',
                language: {
                    search: "Search products:",
                    lengthMenu: "Show _MENU_ products per page",
                    info: "Showing _START_ to _END_ of _TOTAL_ products",
                    infoEmpty: "No products found",
                    infoFiltered: "(filtered from _MAX_ total products)"
                },
                buttons: [
                    {
                        extend: 'csv',
                        text: '<i class="bi bi-download me-1"></i>Export CSV',
                        className: 'btn btn-outline-success btn-sm'
                    }
                ]
            });

            // Add export button to our custom location
            productsTable.buttons().container().appendTo('#exportBtn').hide();
        }

        function initializeFilters() {
            // Status filter
            $('#statusFilter').on('change', function() {
                currentFilters.status = $(this).val();
                applyFilters();
            });

            // Category filter
            $('#categoryFilter').on('change', function() {
                currentFilters.category = $(this).val();
                applyFilters();
            });

            // Type filter
            $('#typeFilter').on('change', function() {
                currentFilters.type = $(this).val();
                applyFilters();
            });

            // Price range filter
            $('#priceRangeFilter').on('change', function() {
                currentFilters.priceRange = $(this).val();
                applyFilters();
            });

            // Search filter
            $('#searchFilter').on('input', debounce(function() {
                currentFilters.search = $(this).val();
                applyFilters();
            }, 300));

            // Reset filters
            $('#resetFilters').on('click', function() {
                $('#statusFilter, #categoryFilter, #typeFilter, #priceRangeFilter').val('all');
                $('#searchFilter').val('');
                currentFilters = {
                    status: 'all',
                    category: 'all',
                    type: 'all',
                    priceRange: 'all',
                    search: ''
                };
                applyFilters();
            });
        }

        function applyFilters() {
            // Apply custom filters to DataTable
            $.fn.dataTable.ext.search.pop(); // Remove previous custom filter
            
            $.fn.dataTable.ext.search.push(function(settings, data, dataIndex) {
                const row = $(productsTable.row(dataIndex).node());
                
                // Status filter
                if (currentFilters.status !== 'all') {
                    const status = row.data('status');
                    if (status !== currentFilters.status) return false;
                }

                // Category filter
                if (currentFilters.category !== 'all') {
                    const category = row.data('category');
                    if (category !== currentFilters.category) return false;
                }

                // Type filter
                if (currentFilters.type !== 'all') {
                    const type = row.data('type');
                    if (type !== currentFilters.type) return false;
                }

                // Price range filter
                if (currentFilters.priceRange !== 'all') {
                    const price = parseFloat(row.data('price')) || 0;
                    const [min, max] = currentFilters.priceRange.split('-').map(p => p.replace('+', ''));
                    
                    if (max) {
                        if (price < parseFloat(min) || price > parseFloat(max)) return false;
                    } else {
                        if (price < parseFloat(min)) return false;
                    }
                }

                // Search filter
                if (currentFilters.search) {
                    const searchTerm = currentFilters.search.toLowerCase();
                    const title = data[0].toLowerCase();
                    const category = data[4].toLowerCase();
                    const type = data[5].toLowerCase();
                    
                    if (!title.includes(searchTerm) && 
                        !category.includes(searchTerm) && 
                        !type.includes(searchTerm)) {
                        return false;
                    }
                }

                return true;
            });

            productsTable.draw();
            updateActiveFilters();
            updateProductCount();
        }

        function updateActiveFilters() {
            const activeFiltersContainer = $('#activeFilters');
            const filters = [];

            if (currentFilters.status !== 'all') {
                filters.push(`<span class="badge bg-primary filter-badge">Status: ${currentFilters.status}</span>`);
            }
            if (currentFilters.category !== 'all') {
                filters.push(`<span class="badge bg-success filter-badge">Category: ${currentFilters.category}</span>`);
            }
            if (currentFilters.type !== 'all') {
                filters.push(`<span class="badge bg-info filter-badge">Type: ${currentFilters.type}</span>`);
            }
            if (currentFilters.priceRange !== 'all') {
                filters.push(`<span class="badge bg-warning filter-badge">Price: $${currentFilters.priceRange}</span>`);
            }
            if (currentFilters.search) {
                filters.push(`<span class="badge bg-secondary filter-badge">Search: "${currentFilters.search}"</span>`);
            }

            if (filters.length > 0) {
                activeFiltersContainer.html(`
                    <span class="badge bg-secondary me-2">Active Filters:</span>
                    ${filters.join('')}
                `);
            } else {
                activeFiltersContainer.html(`
                    <span class="badge bg-secondary me-2">Active Filters:</span>
                    <span class="text-muted filter-none">None</span>
                `);
            }
        }

        function updateProductCount() {
            const info = productsTable.page.info();
            $('#totalProductsCount').text(info.recordsDisplay);
        }

        function initializeModals() {
            // Edit product modal
            $('#editProductModal').on('show.bs.modal', function (event) {
                const button = $(event.relatedTarget);
                const productId = button.data('product-id');
                
                if (productId) {
                    loadProductData(productId);
                }
            });

            // Clear forms when modals are hidden
            $('#addProductModal, #editProductModal').on('hidden.bs.modal', function() {
                $(this).find('form')[0].reset();
                $(this).find('.is-invalid').removeClass('is-invalid');
                $(this).find('.invalid-feedback').remove();
            });
        }

        function loadProductData(productId) {
            // Show loading state
            $('#editProductModal .modal-body').prepend(`
                <div class="loading-overlay text-center p-3" id="loadingOverlay">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <div class="mt-2">Loading product data...</div>
                </div>
            `);

            $.get(window.appUrls.getProductData, { id: productId })
                .done(function(data) {
                    $('#loadingOverlay').remove();
                    
                    if (data.success) {
                        populateEditForm(data);
                    } else {
                        showToast('Error', data.message || 'Error loading product data', 'error');
                        $('#editProductModal').modal('hide');
                    }
                })
                .fail(function(xhr) {
                    $('#loadingOverlay').remove();
                    showToast('Error', 'Failed to load product data', 'error');
                    $('#editProductModal').modal('hide');
                });
        }

        function populateEditForm(data) {
            $('#editProductId').val(data.productId);
            $('#editTitle').val(data.Title || '');
            $('#editDescription').val(data.Description || '');
            $('#editPrice').val(data.Price || '');
            $('#editPoints').val(data.Points || '');
            $('#editType').val(data.Type || '');
            $('#editCategory').val(data.Category || '');
            $('#editStatus').val(data.Status || 'Active');
            $('#editImageURL').val(data.ImageURL || '');
            $('#editProductNumber').val(data.ProductNumber || '');
            $('#editTag').val(data.Tag || '');
            $('#editFeatured').prop('checked', data.Featured || false);
            $('#displayProductId').text(data.productId);
        }

        function initializeEventHandlers() {
            // Delete product button
            $('#deleteProductBtn').on('click', function() {
                const productId = $('#editProductId').val();
                const title = $('#editTitle').val();
                const productNumber = $('#editProductNumber').val();
                
                $('#deleteProductId').val(productId);
                $('#deleteProductTitle').text(title || 'Unnamed Product');
                $('#deleteProductNumber').text(productNumber || 'No SKU');
                $('#deleteProductInitials').text((title || 'P').substring(0, 1).toUpperCase());
                
                $('#editProductModal').modal('hide');
                $('#deleteProductModal').modal('show');
            });

            // Export button
            $('#exportBtn').on('click', function() {
                productsTable.button(0).trigger();
            });

            // Form validation
            $('form').on('submit', function(e) {
                const form = this;
                if (!form.checkValidity()) {
                    e.preventDefault();
                    e.stopPropagation();
                    addFormValidationClasses(form);
                }
                form.classList.add('was-validated');
            });
        }

        function duplicateProduct(productId) {
            if (confirm('Are you sure you want to duplicate this product?')) {
                $.post(window.appUrls.duplicateProduct, { id: productId })
                    .done(function(response) {
                        if (response.success) {
                            showToast('Success', 'Product duplicated successfully', 'success');
                            location.reload();
                        } else {
                            showToast('Error', response.message || 'Failed to duplicate product', 'error');
                        }
                    })
                    .fail(function() {
                        showToast('Error', 'Failed to duplicate product', 'error');
                    });
            }
        }

        function addFormValidationClasses(form) {
            $(form).find('input[required], select[required], textarea[required]').each(function() {
                if (!this.checkValidity()) {
                    $(this).addClass('is-invalid');
                    if (!$(this).next('.invalid-feedback').length) {
                        $(this).after('<div class="invalid-feedback">' + this.validationMessage + '</div>');
                    }
                } else {
                    $(this).removeClass('is-invalid').addClass('is-valid');
                }
            });
        }

        function showToast(title, message, type = 'info') {
            const toastId = 'toast_' + Date.now();
            const typeClass = {
                'success': 'bg-success text-white',
                'error': 'bg-danger text-white',
                'warning': 'bg-warning text-dark',
                'info': 'bg-info text-white'
            }[type] || 'bg-info text-white';

            const toastHtml = `
                <div class="toast ${typeClass}" id="${toastId}" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="toast-header">
                        <strong class="me-auto">${title}</strong>
                        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                    <div class="toast-body">
                        ${message}
                    </div>
                </div>
            `;

            $('#toastContainer').append(toastHtml);
            
            const toast = new bootstrap.Toast(document.getElementById(toastId), {
                autohide: true,
                delay: 5000
            });
            
            toast.show();
            
            // Remove toast element after it's hidden
            document.getElementById(toastId).addEventListener('hidden.bs.toast', function() {
                this.remove();
            });
        }

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        // Handle TempData messages
        @if (TempData["Success"] != null)
        {
            <text>
            $(document).ready(function() {
                showToast('Success', '@TempData["Success"]', 'success');
            });
            </text>
        }

        @if (TempData["Error"] != null)
        {
            <text>
            $(document).ready(function() {
                showToast('Error', '@TempData["Error"]', 'error');
            });
            </text>
        }
    </script>
}