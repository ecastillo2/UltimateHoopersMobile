@model Website.ViewModels.ClientsViewModel

@{
    ViewData["Title"] = "Client";
    var userType = ViewData["UserType"]?.ToString() ?? "Coach";
}

@section Styles {
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/dataTables.bootstrap5.min.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/responsive/2.2.9/css/responsive.bootstrap5.min.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/buttons/2.2.2/css/buttons.bootstrap5.min.css">
    <link rel="stylesheet" type="text/css" href="~/css/management.css">
  
}

<div class="dashboard-header">
    <div class="container">
        <h1>Client</h1>
       @*  <p class="lead">Manage your client roster, track progress, and schedule training sessions</p> *@
    </div>
</div>

<div class="container">
    <!-- Back button to dashboard -->
    <div class="back-button">
        <a href="@Url.Action("Dashboard", "Dashboard")" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left me-2"></i>Back to Dashboard
        </a>
    </div>

    <!-- Client Filters -->
    <div class="mb-4">
        <div class="card shadow-sm">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h5 class="mb-0">Filter Clients</h5>
                    <button class="btn btn-sm btn-outline-secondary" id="resetFilters">
                        <i class="bi bi-arrow-counterclockwise me-1"></i>
                        Reset Filters
                    </button>
                </div>

                <div class="row g-3">
                    <div class="col-md-6">
                        <label for="statusFilter" class="form-label">Status</label>
                        <select class="form-select" id="statusFilter">
                            <option value="all" selected>All Statuses</option>
                            <option value="active">Active</option>
                            <option value="on hold">On Hold</option>
                            <option value="inactive">Inactive</option>
                        </select>
                    </div>

                    <div class="col-md-6">
                        <label for="joinDateFilter" class="form-label">Join Date</label>
                        <select class="form-select" id="joinDateFilter">
                            <option value="all" selected>All Time</option>
                            <option value="this-month">This Month</option>
                            <option value="last-3-months">Last 3 Months</option>
                            <option value="last-6-months">Last 6 Months</option>
                            <option value="this-year">This Year</option>
                        </select>
                    </div>
                </div>

                <div class="mt-3" id="activeFilters">
                    <span class="badge bg-secondary me-2">Active Filters:</span>
                    <span class="text-muted filter-none">None</span>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-12 text-end">
            <button type="button" class="btn btn-orange" data-bs-toggle="modal" data-bs-target="#addClientModal">
                <i class="bi bi-plus-circle me-2"></i>Add Client
            </button>
        </div>
    </div>

    <!-- DataTable -->
    @if (Model?.Clients != null && Model.Clients.Any())
    {
        <div class="card shadow-sm">
            <div class="card-body">
                <table id="clientsTable" class="table table-striped table-hover w-100">
                    <thead>
                        <tr>
                            <th>Client</th>
                            <th>Date Joined</th>
                            <th>Address</th>
                            <th>Phone#</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.Clients)
                        {
                            // Get client initials
                            string clientInitials = "NA";
                            if (!string.IsNullOrEmpty(item.Client.Name))
                            {
                                var names = item.Client.Name.Split(' ');
                                if (names.Length >= 2)
                                {
                                    clientInitials = $"{names[0][0]}{names[1][0]}";
                                }
                                else if (names.Length == 1 && names[0].Length > 0)
                                {
                                    clientInitials = names[0][0].ToString();
                                }
                            }

                            <tr data-status="active">
                                <td>
                                    <div class="client-container">
                                        <div class="client-avatar">@clientInitials</div>
                                        <div>
                                            <div class="fw-semibold">@item.Client.Name</div>
                                            <div class="text-muted small">ID: #@item.Client.ClientNumber</div>
                                        </div>
                                    </div>
                                </td>
                                <td>@(item.Client.CreatedDate?.ToString("MM/dd/yyyy") ?? "N/A")</td>
                                <td>@item.Client.Address, @item.Client.City, @item.Client.State, @item.Client.Zip</td>
                                <td>@item.Client.PhoneNumber</td>
                                <td>
                                    <div class="table-actions">
                                        <button type="button" class="btn btn-sm btn-outline-primary action-icon" data-bs-toggle="modal" data-bs-target="#editClientModal" data-client-id="@item.Client.ClientId" title="Edit">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        <a href="@Url.Action("Details", "Client", new { id = item.Client.ClientId })" class="btn btn-sm btn-primary action-icon" title="View">
                                            <i class="bi bi-eye"></i>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else
    {
        <div class="no-clients-message">
            <i class="bi bi-people" style="font-size: 3rem; color: var(--secondary-color);"></i>
            <h3 class="mt-3">No Clients Found</h3>
            <p class="text-muted">There are no clients available at the moment. Add a new client to get started!</p>
            <button type="button" class="btn btn-orange mt-3" data-bs-toggle="modal" data-bs-target="#addClientModal">
                <i class="bi bi-plus-circle me-2"></i>Add Client
            </button>
        </div>
    }
</div>

<!-- Add Client Modal -->
<div class="modal fade" id="addClientModal" tabindex="-1" aria-labelledby="addClientModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addClientModalLabel">Add New Client</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="addClientForm" method="post" action="@Url.Action("Create", "Client")">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-12">
                            <label for="addName" class="form-label">Client Name</label>
                            <input type="text" class="form-control" id="addName" name="Name" required>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-12">
                            <label for="addAddress" class="form-label">Address</label>
                            <input type="text" class="form-control" id="addAddress" name="Address" required>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="addCity" class="form-label">City</label>
                            <input type="text" class="form-control" id="addCity" name="City" required>
                        </div>
                        <div class="col-md-4">
                            <label for="addState" class="form-label">State</label>
                            <input type="text" class="form-control" id="addState" name="State">
                        </div>
                        <div class="col-md-4">
                            <label for="addZip" class="form-label">Zip</label>
                            <input type="text" class="form-control" id="addZip" name="Zip" required>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="addPhoneNumber" class="form-label">Phone Number</label>
                            <input type="tel" class="form-control" id="addPhoneNumber" name="PhoneNumber">
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="addNotes" class="form-label">Notes</label>
                        <textarea class="form-control" id="addNotes" name="Notes" rows="3" placeholder="Training goals, preferences, medical notes, etc."></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-orange">Add Client</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Client Modal -->
<div class="modal fade" id="editClientModal" tabindex="-1" aria-labelledby="editClientModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editClientModalLabel">Edit Client</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <ul class="nav nav-tabs" id="editClientTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="details-tab" data-bs-toggle="tab" data-bs-target="#details-tab-pane" type="button" role="tab" aria-controls="details-tab-pane" aria-selected="true">Details</button>
                    </li>
                    <!-- Courts Tab -->
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="courts-tab" data-bs-toggle="tab" data-bs-target="#courts-tab-pane" type="button" role="tab" aria-controls="courts-tab-pane" aria-selected="false">Courts</button>
                    </li>
                    <!-- Users Tab -->
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="users-tab" data-bs-toggle="tab" data-bs-target="#users-tab-pane" type="button" role="tab" aria-controls="users-tab-pane" aria-selected="false">Users</button>
                    </li>
                </ul>
                <div class="tab-content" id="editClientTabContent">
                    <div class="tab-pane fade show active" id="details-tab-pane" role="tabpanel" aria-labelledby="details-tab" tabindex="0">
                        <form id="editClientForm" method="post" action="@Url.Action("Edit", "Client")" class="mt-4">
                            @Html.AntiForgeryToken()
                            <input type="hidden" id="editClientId" name="ClientId" value="" />
                            <input type="hidden" id="editClientNumber" name="ClientNumber" value="" />
                            <input type="hidden" id="editCreatedDate" name="CreatedDate" value="" />

                            <div class="row mb-3">
                                <div class="col-md-12">
                                    <label for="editName" class="form-label">Client Name</label>
                                    <input type="text" class="form-control" id="editName" name="Name" required>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-12">
                                    <label for="editAddress" class="form-label">Address</label>
                                    <input type="text" class="form-control" id="editAddress" name="Address" required>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-4">
                                    <label for="editCity" class="form-label">City</label>
                                    <input type="text" class="form-control" id="editCity" name="City" required>
                                </div>
                                <div class="col-md-4">
                                    <label for="editState" class="form-label">State</label>
                                    <input type="text" class="form-control" id="editState" name="State">
                                </div>
                                <div class="col-md-4">
                                    <label for="editZip" class="form-label">Zip</label>
                                    <input type="text" class="form-control" id="editZip" name="Zip" required>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="editPhoneNumber" class="form-label">Phone Number</label>
                                    <input type="tel" class="form-control" id="editPhoneNumber" name="PhoneNumber">
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="editNotes" class="form-label">Notes</label>
                                <textarea class="form-control" id="editNotes" name="Notes" rows="3" placeholder="Training goals, preferences, medical notes, etc."></textarea>
                            </div>

                            <div class="modal-footer">
                                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-danger me-auto" id="deleteClientBtn">Delete Client</button>
                                <button type="submit" class="btn btn-orange">Save Changes</button>
                            </div>
                        </form>
                    </div>

                    <!-- Courts Tab Content -->
                    <div class="tab-pane fade" id="courts-tab-pane" role="tabpanel" aria-labelledby="courts-tab" tabindex="0">
                        <div class="mt-4">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h6 class="mb-0">Preferred Courts</h6>
                                <button class="btn btn-sm btn-outline-primary" id="addCourtBtn">
                                    <i class="bi bi-plus-circle me-1"></i>Add Court
                                </button>
                            </div>
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead>
                                        <tr>
                                            <th>Court Name</th>
                                            <th>Court Size</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody id="courtsTableBody">
                                        <!-- Court data will be displayed here -->
                                        <tr>
                                            <td colspan="5" class="text-center py-4 text-muted">
                                                Loading courts...
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>

                    <!-- Users Tab Content -->
                    <div class="tab-pane fade" id="users-tab-pane" role="tabpanel" aria-labelledby="users-tab" tabindex="0">
                        <div class="mt-4">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h6 class="mb-0">Associated Users</h6>
                                <button class="btn btn-sm btn-outline-primary" id="addUserBtn">
                                    <i class="bi bi-person-plus me-1"></i>Add User
                                </button>
                            </div>
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead>
                                        <tr>
                                            <th>User</th>
                                            <th>Email</th>
                                            <th>Role</th>
                                            <th>Status</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody id="usersTableBody">
                                        <!-- User data will be displayed here -->
                                        <tr>
                                            <td colspan="5" class="text-center py-4 text-muted">
                                                Loading users...
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Client Confirmation Modal -->
<div class="modal fade" id="deleteClientModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Deletion</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this client? This action cannot be undone.</p>
                <p class="text-danger"><strong>Note:</strong> All related data for this client will be permanently deleted.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                <form id="deleteClientForm" method="post" action="@Url.Action("Delete", "Client")">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="deleteClientId" name="id" value="" />
                    <button type="submit" class="btn btn-danger">Delete Client</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script type="text/javascript" src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/1.11.5/js/dataTables.bootstrap5.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/responsive/2.2.9/js/dataTables.responsive.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/responsive/2.2.9/js/responsive.bootstrap5.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/buttons/2.2.2/js/dataTables.buttons.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/buttons/2.2.2/js/buttons.bootstrap5.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/buttons/2.2.2/js/buttons.html5.min.js"></script>

    <script>
             document.addEventListener('DOMContentLoaded', function() {
            // Log all data-date attributes to help debugging
            document.querySelectorAll('[data-date]').forEach(el => {
                console.log('Found data-date:', el.getAttribute('data-date'));
            });

            // Initialize DataTable
            const clientsTable = $('#clientsTable').DataTable({
                responsive: true,
                lengthMenu: [[10, 25, 50, -1], [10, 25, 50, "All"]],
                dom: '<"row"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6"f>>rtip',
                language: {
                    search: "_INPUT_",
                    searchPlaceholder: "Search clients...",
                    lengthMenu: "Show _MENU_ clients per page",
                    info: "Showing _START_ to _END_ of _TOTAL_ clients",
                    infoEmpty: "Showing 0 to 0 of 0 clients",
                    infoFiltered: "(filtered from _MAX_ total clients)"
                },
                columnDefs: [
                    { className: "align-middle", targets: "_all" },
                    { orderable: false, targets: [4] } // Disable sorting on the Actions column
                ],
                order: [[1, 'desc']] // Sort by Date Joined column by default (newest first)
            });

            // Filter references and implementation
            setupFilters(clientsTable);

            // Edit client modal functionality - directly extract data from datatable row
            const editClientModal = document.getElementById('editClientModal');
            if (editClientModal) {
                editClientModal.addEventListener('show.bs.modal', function(event) {
                    const button = event.relatedTarget;
                    const clientId = button.getAttribute('data-client-id');
                    console.log("Edit modal opened for client ID:", clientId);

                    // Store the client ID in the hidden form field
                    document.getElementById('editClientId').value = clientId;

                    // Show loading indicator in the courts tab
                    document.getElementById('courtsTableBody').innerHTML = `
                        <tr>
                            <td colspan="2" class="text-center py-4 text-muted">
                                <div class="spinner-border spinner-border-sm text-secondary me-2" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                Loading courts data...
                            </td>
                        </tr>`;

                    // Find the row in the DataTable
                    const rowData = findRowDataById(clientsTable, clientId);

                    if (rowData) {
                        // We found the client in the datatable - use this data to pre-populate
                        populateEditFormFromRowData(rowData);
                    } else {
                        // Fallback: If not found in datatable (rare case), use API directly
                        console.log("Row data not found in table, using API directly");
                        fetchClientDataFromApi(clientId);
                    }
                });
            }

            // Handle delete client button
            const deleteClientBtn = document.getElementById('deleteClientBtn');
            if (deleteClientBtn) {
                deleteClientBtn.addEventListener('click', function() {
                    const clientId = document.getElementById('editClientId').value;
                    document.getElementById('deleteClientId').value = clientId;

                    // Hide edit modal and show delete confirmation modal
                    const editModal = bootstrap.Modal.getInstance(document.getElementById('editClientModal'));
                    editModal.hide();

                    const deleteModal = new bootstrap.Modal(document.getElementById('deleteClientModal'));
                    deleteModal.show();
                });
            }

            // Handle add user button
            const addUserBtn = document.getElementById('addUserBtn');
            if (addUserBtn) {
                addUserBtn.addEventListener('click', function() {
                    const clientId = document.getElementById('editClientId').value;
                    console.log("Adding user for client ID:", clientId);
                    addClientUser(clientId);
                });
            }

            function loadClientUsers(clientId) {
                console.log("Loading users for client ID:", clientId);

                if (!clientId) {
                    console.error("Error: No client ID provided to loadClientUsers");
                    document.getElementById('usersTableBody').innerHTML = `
                        <tr>
                            <td colspan="5" class="text-center py-4 text-danger">
                                <i class="bi bi-exclamation-triangle me-2"></i>
                                Error: No client ID available. Please try again.
                            </td>
                        </tr>`;
                    return;
                }

                fetch(`/Client/GetClientUsers?clientId=${clientId}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Display the users in the users tab
                        displayClientUsers(data || []);
                        console.log("Users loaded successfully:", data);
                    })
                    .catch(error => {
                        console.error('Error loading client users:', error);
                        // Show error in users table
                        document.getElementById('usersTableBody').innerHTML = `
                            <tr>
                                <td colspan="5" class="text-center py-4 text-danger">
                                    <i class="bi bi-exclamation-triangle me-2"></i>
                                    Error loading users. Please try again.
                                </td>
                            </tr>`;
                    });
            }

            window.displayClientUsers = function(users) {
                console.log("Displaying users:", users);
                const usersTableBody = document.getElementById('usersTableBody');
                if (!usersTableBody) {
                    console.error("Users table body element not found");
                    return;
                }

                if (!users || users.length === 0) {
                    usersTableBody.innerHTML = `
                        <tr>
                            <td colspan="5" class="text-center py-4 text-muted">
                                No users associated with this client.
                            </td>
                        </tr>`;
                    return;
                }

                let html = '';
                users.forEach(user => {
                    // Get user initials
                    let userInitials = "NA";
                    if (user.firstName && user.lastName) {
                        userInitials = `${user.firstName[0]}${user.lastName[0]}`;
                    } else if (user.firstName) {
                        userInitials = user.firstName[0];
                    } else if (user.email) {
                        userInitials = user.email[0].toUpperCase();
                    }

                    // Determine status class
                    let statusClass = "bg-success";
                    if (user.status === "Inactive") {
                        statusClass = "bg-secondary";
                    } else if (user.status === "Pending") {
                        statusClass = "bg-warning";
                    }

                    html += `
                        <tr>
                            <td>
                                <div class="d-flex align-items-center">
                                    <div class="flex-shrink-0 me-3" style="width: 36px; height: 36px; background-color: var(--secondary-color); color: white; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-weight: bold;">
                                        ${userInitials}
                                    </div>
                                    <div>
                                        <div class="fw-semibold">${user.firstName || ''} ${user.lastName || ''}</div>
                                    </div>
                                </div>
                            </td>
                            <td>${user.email || 'N/A'}</td>
                            <td>${user.role || 'User'}</td>
                            <td><span class="badge ${statusClass} badge-pill">${user.status || 'Active'}</span></td>
                            <td>
                                <div class="btn-group btn-group-sm">
                                    <button type="button" class="btn btn-outline-primary edit-user-btn"
                                            data-user-id="${user.userId}"
                                            data-bs-toggle="tooltip"
                                            title="Edit User">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button type="button" class="btn btn-outline-danger remove-user-btn"
                                            data-user-id="${user.userId}"
                                            data-bs-toggle="tooltip"
                                            title="Remove User">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>`;
                });

                usersTableBody.innerHTML = html;

                // Add event listeners to user action buttons
                document.querySelectorAll('.edit-user-btn').forEach(button => {
                    button.addEventListener('click', function() {
                        const userId = this.getAttribute('data-user-id');
                        const clientId = document.getElementById('editClientId').value;
                        console.log("Editing user:", userId, "for client:", clientId);
                        editClientUser(clientId, userId);
                    });
                });

                document.querySelectorAll('.remove-user-btn').forEach(button => {
                    button.addEventListener('click', function() {
                        const userId = this.getAttribute('data-user-id');
                        const clientId = document.getElementById('editClientId').value;
                        console.log("Removing user:", userId, "from client:", clientId);
                        removeClientUser(clientId, userId);
                    });
                });

                // Initialize tooltips
                var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
                var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                    return new bootstrap.Tooltip(tooltipTriggerEl);
                });
            }

            window.addClientUser = function(clientId) {
                console.log("Adding user for client ID:", clientId);

                if (!clientId) {
                    console.error("Error: No client ID provided to addClientUser");
                    alert("Error: Cannot add user - client ID is missing");
                    return;
                }

                // Open prompt for email
                const email = prompt('Enter user email address:');
                if (!email) return;

                // Create user object with only required fields
                const userData = {
                    clientId: clientId,
                    email: email
                };

                // Get the token from the form
                const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

                console.log("Sending user data:", userData);

                // Send to server - replace with your actual endpoint
                fetch('/Client/AddClientUser', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify(userData)
                })
                .then(response => response.json())
                .then(data => {
                    console.log("Add user response:", data);
                    if (data.success) {
                        // Reload users list
                        loadClientUsers(clientId);
                    } else {
                        alert('Error adding user: ' + (data.message || 'Unknown error'));
                    }
                })
                .catch(error => {
                    console.error('Error adding user:', error);
                    alert('Error adding user. Please try again.');
                });
            }

            window.editClientUser = function(clientId, userId) {
                console.log("Editing user:", userId, "for client:", clientId);

                if (!clientId || !userId) {
                    console.error("Error: Missing IDs for editClientUser", { clientId, userId });
                    alert("Error: Cannot edit user - missing required information");
                    return;
                }

                // You would typically fetch user data here first, but for simplicity:
                const email = prompt('Enter new email address:');
                if (email === null) return;

                const userData = {
                    clientId: clientId,
                    userId: userId,
                    email: email
                };

                // Get the token from the form
                const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

                // Send to server - replace with your actual endpoint
                fetch('/Client/UpdateClientUser', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify(userData)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Reload users list
                        loadClientUsers(clientId);
                    } else {
                        alert('Error updating user: ' + (data.message || 'Unknown error'));
                    }
                })
                .catch(error => {
                    console.error('Error updating user:', error);
                    alert('Error updating user. Please try again.');
                });
            }

            window.removeClientUser = function(clientId, userId) {
                console.log("Removing user:", userId, "from client:", clientId);

                if (!clientId || !userId) {
                    console.error("Error: Missing IDs for removeClientUser", { clientId, userId });
                    alert("Error: Cannot remove user - missing required information");
                    return;
                }

                if (!confirm('Are you sure you want to remove this user from the client?')) {
                    return;
                }

                // Get the token from the form
                const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

                // Send to server - replace with your actual endpoint
                fetch('/Client/RemoveClientUser', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify({ clientId, userId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Reload users list
                        loadClientUsers(clientId);
                    } else {
                        alert('Error removing user: ' + (data.message || 'Unknown error'));
                    }
                })
                .catch(error => {
                    console.error('Error removing user:', error);
                    alert('Error removing user. Please try again.');
                });
            }

            function findRowDataById(table, clientId) {
                console.log("Finding row data for client ID:", clientId);

                // Get all edit buttons from the table
                const editButtons = table.rows().nodes().toArray().map(row =>
                    row.querySelector('button[data-client-id="' + clientId + '"]')
                );

                // Find the button with the matching client ID
                const matchingButton = editButtons.find(button => button && button.getAttribute('data-client-id') === clientId);

                if (matchingButton) {
                    // Get the row element that contains this button
                    const row = matchingButton.closest('tr');
                    // Get the row data
                    const rowData = table.row(row).data();
                    console.log("Found row data:", rowData);
                    return rowData;
                }

                console.log("Row data not found for client ID:", clientId);
                return null;
            }

            function populateEditFormFromRowData(rowData) {
                console.log("Populating form from row data");

                // Parse client name from the first column's HTML (it contains the client avatar and name)
                let clientName = '';
                let clientNumber = '';

                // Create a temporary element to parse the HTML
                const tempEl = document.createElement('div');
                tempEl.innerHTML = rowData[0];

                // Extract the name from the fw-semibold div
                const nameEl = tempEl.querySelector('.fw-semibold');
                if (nameEl) {
                    clientName = nameEl.textContent.trim();
                }

                // Extract the client number from the small div
                const smallEl = tempEl.querySelector('.text-muted.small');
                if (smallEl) {
                    // Example format: "ID: #12345"
                    const match = smallEl.textContent.match(/ID: #(\S+)/);
                    if (match && match[1]) {
                        clientNumber = match[1];
                    }
                }

                // Get address parts
                const addressFull = rowData[2]; // "Address, City, State, Zip"
                const addressParts = addressFull.split(',').map(part => part.trim());

                const address = addressParts[0] || '';
                const city = addressParts[1] || '';
                const state = addressParts[2] || '';
                const zip = addressParts[3] || '';

                // Phone number is in column 3
                const phoneNumber = rowData[3] || '';

                // Date joined / Created date is in column 1
                const createdDate = rowData[1] || '';

                // Set values in the form
                document.getElementById('editClientNumber').value = clientNumber;
                document.getElementById('editName').value = clientName;
                document.getElementById('editAddress').value = address;
                document.getElementById('editCity').value = city;
                document.getElementById('editState').value = state;
                document.getElementById('editZip').value = zip;
                document.getElementById('editPhoneNumber').value = phoneNumber;
                document.getElementById('editCreatedDate').value = createdDate;

                // We still need to fetch courts from the API
                const clientId = document.getElementById('editClientId').value;
                console.log("Fetching additional data for client ID:", clientId);
                fetchAdditionalClientData(clientId);
            }

            function fetchAdditionalClientData(clientId) {
                console.log("Fetching additional data for client ID:", clientId);
                // Load the courts directly
                loadClientCourts(clientId);
            }

            function fetchClientDataFromApi(clientId) {
                console.log("Fetching client data for ID:", clientId);

                if (!clientId) {
                    console.error("Error: No client ID provided to fetchClientDataFromApi");
                    document.getElementById('courtsTableBody').innerHTML = `
                        <tr>
                            <td colspan="2" class="text-center py-4 text-danger">
                                <i class="bi bi-exclamation-triangle me-2"></i>
                                Error: No client ID available. Please try again.
                            </td>
                        </tr>`;
                    return;
                }

                fetch(`/Client/GetClientData?id=${clientId}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Populate form fields with API data
                        document.getElementById('editClientNumber').value = data.clientNumber || '';
                        document.getElementById('editName').value = data.name || '';
                        document.getElementById('editAddress').value = data.address || '';
                        document.getElementById('editCity').value = data.city || '';
                        document.getElementById('editState').value = data.state || '';
                        document.getElementById('editZip').value = data.zip || '';
                        document.getElementById('editPhoneNumber').value = data.phoneNumber || '';
                        document.getElementById('editNotes').value = data.notes || '';
                        document.getElementById('editCreatedDate').value = data.createdDate || '';

                        // Display court data in the courts tab
                        displayClientCourts(data.courtList || []);

                        console.log("Client data loaded successfully. Courts:", data.courtList);
                    })
                    .catch(error => {
                        console.error('Error loading client data:', error);
                        alert('Error loading client data. Please try again.');

                        // Show error in courts table
                        document.getElementById('courtsTableBody').innerHTML = `
                            <tr>
                                <td colspan="2" class="text-center py-4 text-danger">
                                    <i class="bi bi-exclamation-triangle me-2"></i>
                                    Error loading client data. Please try again.
                                </td>
                            </tr>`;
                    });
            }

            // MOVED THIS FUNCTION OUT OF setupFilters to make it globally accessible
            function loadClientCourts(clientId) {
                console.log("Loading courts for client ID:", clientId);

                if (!clientId) {
                    console.error("Error: No client ID provided to loadClientCourts");
                    document.getElementById('courtsTableBody').innerHTML = `
                        <tr>
                            <td colspan="2" class="text-center py-4 text-danger">
                                <i class="bi bi-exclamation-triangle me-2"></i>
                                Error: No client ID available. Please try again.
                            </td>
                        </tr>`;
                    return;
                }

                fetch(`/Client/GetClientData?id=${clientId}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Display the courts in the courts tab
                        displayClientCourts(data.courtList || []);

                        // Also populate notes if available
                        if (data.notes) {
                            document.getElementById('editNotes').value = data.notes;
                        }

                        console.log("Courts loaded successfully:", data.courtList);
                    })
                    .catch(error => {
                        console.error('Error loading client courts:', error);
                        // Show error in courts table
                        document.getElementById('courtsTableBody').innerHTML = `
                            <tr>
                                <td colspan="2" class="text-center py-4 text-danger">
                                    <i class="bi bi-exclamation-triangle me-2"></i>
                                    Error loading courts. Please try again.
                                </td>
                            </tr>`;
                    });
            }

            function setupFilters(table) {
                const statusFilter = $('#statusFilter');
                const joinDateFilter = $('#joinDateFilter');
                const resetFiltersBtn = $('#resetFilters');
                const activeFiltersContainer = $('#activeFilters');

                // Apply filter function
                function applyFilters() {
                    console.log("Applying filters", {
                        status: statusFilter.val(),
                        joinDate: joinDateFilter.val()
                    });

                    // Clear existing filters
                    table.search('').columns().search('').draw();

                    // Get all rows
                    const rows = table.rows().nodes().to$();

                    // Hide all rows first
                    rows.hide();

                    // Show rows that match our filters
                    rows.each(function(i, row) {
                        const $row = $(row);
                        let showRow = true;

                        // Status filtering
                        if (statusFilter.val() !== 'all') {
                            const status = $row.attr('data-status') || '';
                            if (status.toLowerCase() !== statusFilter.val().toLowerCase()) {
                                showRow = false;
                            }
                        }

                        // Date filtering
                        if (showRow && joinDateFilter.val() !== 'all') {
                            const dateAttr = $row.attr('data-date');
                            if (!dateAttr || dateAttr === '') {
                                showRow = false;
                            } else {
                                try {
                                    const joinDate = new Date(dateAttr);
                                    const today = new Date();

                                    // Calculate reference dates
                                    const thisMonth = new Date(today.getFullYear(), today.getMonth(), 1);
                                    const threeMonthsAgo = new Date(today);
                                    threeMonthsAgo.setMonth(today.getMonth() - 3);
                                    const sixMonthsAgo = new Date(today);
                                    sixMonthsAgo.setMonth(today.getMonth() - 6);
                                    const thisYear = new Date(today.getFullYear(), 0, 1);

                                    switch (joinDateFilter.val()) {
                                        case 'this-month':
                                            if (joinDate < thisMonth) {
                                                showRow = false;
                                            }
                                            break;
                                        case 'last-3-months':
                                            if (joinDate < threeMonthsAgo) {
                                                showRow = false;
                                            }
                                            break;
                                        case 'last-6-months':
                                            if (joinDate < sixMonthsAgo) {
                                                showRow = false;
                                            }
                                            break;
                                        case 'this-year':
                                            if (joinDate < thisYear) {
                                                showRow = false;
                                            }
                                            break;
                                    }
                                } catch (e) {
                                    console.error("Error parsing date:", dateAttr, e);
                                    showRow = false;
                                }
                            }
                        }

                        // Show row if it passed all filters
                        if (showRow) {
                            $row.show();
                        }
                    });

                    // Update the active filters display
                    updateActiveFilters();
                }

                // Update the active filters display
                function updateActiveFilters() {
                    // Clear the current active filters display (except the label)
                    activeFiltersContainer.find('.filter-badge, .filter-none').remove();

                    // Check if any filters are active
                    const hasActiveFilters =
                        statusFilter.val() !== 'all' ||
                        joinDateFilter.val() !== 'all';

                    // If no filters are active, show "None"
                    if (!hasActiveFilters) {
                        activeFiltersContainer.append(
                            $('<span>').addClass('text-muted filter-none').text('None')
                        );
                        return;
                    }

                    // Add badges for active filters
                    if (statusFilter.val() !== 'all') {
                        addFilterBadge('Status', formatFilterValue(statusFilter.val()), function() {
                            statusFilter.val('all');
                            applyFilters();
                        });
                    }

                    if (joinDateFilter.val() !== 'all') {
                        addFilterBadge('Join Date', formatFilterValue(joinDateFilter.val()), function() {
                            joinDateFilter.val('all');
                            applyFilters();
                        });
                    }
                }

                // Helper function to format filter values for display
                function formatFilterValue(value) {
                    return value
                        .split('-')
                        .map(word => word.charAt(0).toUpperCase() + word.slice(1))
                        .join(' ');
                }

                // Add a filter badge to the display
                function addFilterBadge(label, value, removeCallback) {
                    const badge = $('<span>')
                        .addClass('badge bg-primary me-2 filter-badge')
                        .text(`${label}: ${value}`);

                    const removeBtn = $('<button>')
                        .addClass('btn-close btn-close-white ms-1')
                        .css('font-size', '0.5rem')
                        .on('click', removeCallback);

                    badge.append(removeBtn);
                    activeFiltersContainer.append(badge);
                }

                // Add event listeners to filters
                statusFilter.on('change', applyFilters);
                joinDateFilter.on('change', applyFilters);

                // Reset filters button
                resetFiltersBtn.on('click', function() {
                    statusFilter.val('all');
                    joinDateFilter.val('all');
                    applyFilters();

                    // Show all rows
                    table.rows().nodes().to$().show();
                    table.draw();
                });

                // Initialize with current filter values
                applyFilters();
            }

            // Function to display client courts - simplified
            window.displayClientCourts = function(courts) {
                console.log("Displaying courts:", courts);
                const courtsTableBody = document.getElementById('courtsTableBody');
                if (!courtsTableBody) {
                    console.error("Courts table body element not found");
                    return;
                }

                if (!courts || courts.length === 0) {
                    courtsTableBody.innerHTML = `
                        <tr>
                            <td colspan="2" class="text-center py-4 text-muted">
                                No courts associated with this client.
                            </td>
                        </tr>`;
                    return;
                }

                let html = '';
                courts.forEach(court => {
                    html += `
                        <tr>
                            <td>${court.name || 'N/A'}</td>
                            <td>
                                <div class="btn-group btn-group-sm">
                                    <button type="button" class="btn btn-outline-primary edit-court-btn"
                                            data-court-id="${court.courtId}"
                                            data-bs-toggle="tooltip"
                                            title="Edit Court">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button type="button" class="btn btn-outline-danger remove-court-btn"
                                            data-court-id="${court.courtId}"
                                            data-bs-toggle="tooltip"
                                            title="Remove Court">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>`;
                });

                courtsTableBody.innerHTML = html;

                // Add event listeners to court action buttons
                document.querySelectorAll('.edit-court-btn').forEach(button => {
                    button.addEventListener('click', function() {
                        const courtId = this.getAttribute('data-court-id');
                        const clientId = document.getElementById('editClientId').value;
                        console.log("Editing court:", courtId, "for client:", clientId);
                        editClientCourt(clientId, courtId);
                    });
                });

                document.querySelectorAll('.remove-court-btn').forEach(button => {
                    button.addEventListener('click', function() {
                        const courtId = this.getAttribute('data-court-id');
                        const clientId = document.getElementById('editClientId').value;
                        console.log("Removing court:", courtId, "for client:", clientId);
                        removeClientCourt(clientId, courtId);
                    });
                });

                // Initialize tooltips
                var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
                var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                    return new bootstrap.Tooltip(tooltipTriggerEl);
                });
            }

            // Court management functions
            window.addClientCourt = function(clientId) {
                console.log("Adding court for client ID:", clientId);

                if (!clientId) {
                    console.error("Error: No client ID provided to addClientCourt");
                    alert("Error: Cannot add court - client ID is missing");
                    return;
                }

                // Simplified - only ask for court name
                const courtName = prompt('Enter court name:');
                if (!courtName) return;

                // Create court object with only required fields
                const courtData = {
                    clientId: clientId,
                    name: courtName
                };

                // Get the token from the form
                const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

                console.log("Sending court data:", courtData);

                // Send to server
                fetch('/Client/AddClientCourt', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify(courtData)
                })
                .then(response => response.json())
                .then(data => {
                    console.log("Add court response:", data);
                    if (data.success) {
                        // Reload courts list
                        fetch(`/Client/GetClientData?id=${clientId}`)
                            .then(response => response.json())
                            .then(clientData => {
                                displayClientCourts(clientData.courtList || []);
                            })
                            .catch(error => {
                                console.error('Error reloading client data:', error);
                            });
                    } else {
                        alert('Error adding court: ' + (data.message || 'Unknown error'));
                    }
                })
                .catch(error => {
                    console.error('Error adding court:', error);
                    alert('Error adding court. Please try again.');
                });
            }

            window.editClientCourt = function(clientId, courtId) {
                console.log("Editing court:", courtId, "for client:", clientId);

                if (!clientId || !courtId) {
                    console.error("Error: Missing IDs for editClientCourt", { clientId, courtId });
                    alert("Error: Cannot edit court - missing required information");
                    return;
                }

                // Get current court data first
                fetch(`/Client/GetCourtData?courtId=${courtId}`)
                    .then(response => response.json())
                    .then(court => {
                        // Prompt for updated values - simplified
                        const courtName = prompt('Court name:', court.name || '');
                        if (courtName === null) return;

                        // Create updated court object with only required fields
                        const courtData = {
                            courtId: courtId,
                            clientId: clientId,
                            name: courtName
                        };

                        // Get the token from the form
                        const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

                        console.log("Updating court with data:", courtData);

                        // Send to server
                        fetch('/Client/UpdateClientCourt', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': token
                            },
                            body: JSON.stringify(courtData)
                        })
                        .then(response => response.json())
                        .then(data => {
                            console.log("Update court response:", data);
                            if (data.success) {
                                // Reload courts list
                                fetch(`/Client/GetClientData?id=${clientId}`)
                                    .then(response => response.json())
                                    .then(clientData => {
                                        displayClientCourts(clientData.courtList || []);
                                    })
                                    .catch(error => {
                                        console.error('Error reloading client data:', error);
                                    });
                            } else {
                                alert('Error updating court: ' + (data.message || 'Unknown error'));
                            }
                        })
                        .catch(error => {
                            console.error('Error updating court:', error);
                            alert('Error updating court. Please try again.');
                        });
                    })
                    .catch(error => {
                        console.error('Error getting court data:', error);
                        alert('Error getting court data. Please try again.');
                    });
            }

            window.removeClientCourt = function(clientId, courtId) {
                console.log("Removing court:", courtId, "for client:", clientId);

                if (!clientId || !courtId) {
                    console.error("Error: Missing IDs for removeClientCourt", { clientId, courtId });
                    alert("Error: Cannot remove court - missing required information");
                    return;
                }

                if (!confirm('Are you sure you want to remove this court?')) {
                    return;
                }

                // Get the token from the form
                const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

                fetch('/Client/RemoveClientCourt', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify({ clientId, courtId })
                })
                .then(response => response.json())
                .then(data => {
                    console.log("Remove court response:", data);
                    if (data.success) {
                        // Reload courts list
                        fetch(`/Client/GetClientData?id=${clientId}`)
                            .then(response => response.json())
                            .then(clientData => {
                                displayClientCourts(clientData.courtList || []);
                            })
                            .catch(error => {
                                console.error('Error reloading client data:', error);
                            });
                    } else {
                        alert('Error removing court: ' + (data.message || 'Unknown error'));
                    }
                })
                .catch(error => {
                    console.error('Error removing court:', error);
                    alert('Error removing court. Please try again.');
                });
            }
        });
    </script>
}