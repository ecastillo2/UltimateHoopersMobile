@model Website.ViewModels.ClientsViewModel

@{
    ViewData["Title"] = "Client Management";
    var userType = ViewData["UserType"]?.ToString() ?? "Coach";
}

@section Styles {
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/dataTables.bootstrap5.min.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/responsive/2.2.9/css/responsive.bootstrap5.min.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/buttons/2.2.2/css/buttons.bootstrap5.min.css">

    <style>
        :root {
            --primary-color: #FF6B00;
            --secondary-color: #1C2C5B;
            --accent-color: #3BACB6;
            --light-color: #F8F9FA;
            --dark-color: #212529;
        }

        .dashboard-header {
            background: linear-gradient(135deg, var(--secondary-color) 0%, #0b1733 100%);
            color: white;
            padding: 2rem 0;
            margin-bottom: 2rem;
        }

        .back-button {
            margin-bottom: 20px;
        }

        .modal-content {
            border-radius: 15px;
            overflow: hidden;
        }

        .modal-header {
            background-color: var(--secondary-color);
            color: white;
            border-bottom: none;
        }

        .modal-footer {
            border-top: none;
        }

        .badge-pill {
            border-radius: 20px;
            padding: 0.35em 0.65em;
            font-size: 0.75em;
            font-weight: 600;
        }

        .btn-orange {
            background-color: var(--primary-color);
            color: white;
        }

            .btn-orange:hover {
                background-color: #e05e00;
                color: white;
            }

        .btn-navy {
            background-color: var(--secondary-color);
            color: white;
        }

            .btn-navy:hover {
                background-color: #162249;
                color: white;
            }

        /* DataTable Customization */
        .dataTables_wrapper .dataTables_filter input {
            border-radius: 50px;
            border: 1px solid #e9ecef;
            padding: 0.375rem 1rem;
            margin-left: 0.5em;
        }

        .dataTables_wrapper .dataTables_length select {
            border-radius: 50px;
            border: 1px solid #e9ecef;
            padding: 0.375rem 1rem;
        }

        .dataTables_wrapper .dt-buttons .btn {
            border-radius: 50px;
        }

        .dataTables_wrapper .dataTables_paginate .paginate_button {
            border-radius: 50px;
        }

            .dataTables_wrapper .dataTables_paginate .paginate_button.current {
                background: var(--primary-color);
                color: white !important;
                border: 1px solid var(--primary-color);
            }

                .dataTables_wrapper .dataTables_paginate .paginate_button.current:hover {
                    background: #e05e00;
                    color: white !important;
                    border: 1px solid #e05e00;
                }

        .table-actions {
            display: flex;
            gap: 5px;
            justify-content: center;
        }

        .action-icon {
            cursor: pointer;
            padding: 5px;
            border-radius: 5px;
        }

            .action-icon:hover {
                background-color: rgba(0, 0, 0, 0.05);
            }

        .progress-sm {
            height: 6px;
            border-radius: 3px;
        }

        .client-avatar {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            background-color: var(--secondary-color);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 0.7rem;
            margin-right: 0.5rem;
        }

        .client-container {
            display: flex;
            align-items: center;
        }

        .progress-container {
            display: flex;
            align-items: center;
            flex-direction: column;
        }

        .progress-text {
            font-size: 0.8rem;
            margin-bottom: 3px;
        }

        table.dataTable {
            border-collapse: collapse !important;
        }

        .table-striped > tbody > tr:nth-of-type(odd) > * {
            --bs-table-accent-bg: rgba(28, 44, 91, 0.03);
        }

        .no-clients-message {
            text-align: center;
            padding: 3rem;
            background-color: #f8f9fa;
            border-radius: 15px;
            margin: 2rem 0;
        }

        .status-badge {
            border-radius: 20px;
            padding: 0.25rem 0.75rem;
            font-size: 0.75rem;
            font-weight: 600;
        }
    </style>
}

<div class="dashboard-header">
    <div class="container">
        <h1>Client Management</h1>
        <p class="lead">Manage your client roster, track progress, and schedule training sessions</p>
    </div>
</div>

<div class="container">
    <!-- Back button to dashboard -->
    <div class="back-button">
        <a href="@Url.Action("Dashboard", "Dashboard")" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left me-2"></i>Back to Dashboard
        </a>
    </div>

    <!-- Client Filters -->
    <div class="mb-4">
        <div class="card shadow-sm">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h5 class="mb-0">Filter Clients</h5>
                    <button class="btn btn-sm btn-outline-secondary" id="resetFilters">
                        <i class="bi bi-arrow-counterclockwise me-1"></i>
                        Reset Filters
                    </button>
                </div>

                <div class="row g-3">
                    <div class="col-md-3">
                        <label for="statusFilter" class="form-label">Status</label>
                        <select class="form-select" id="statusFilter">
                            <option value="all" selected>All Statuses</option>
                            <option value="active">Active</option>
                            <option value="on hold">On Hold</option>
                            <option value="inactive">Inactive</option>
                        </select>
                    </div>

                    <div class="col-md-3">
                        <label for="skillLevelFilter" class="form-label">Skill Level</label>
                        <select class="form-select" id="skillLevelFilter">
                            <option value="all" selected>All Levels</option>
                            <option value="beginner">Beginner</option>
                            <option value="intermediate">Intermediate</option>
                            <option value="advanced">Advanced</option>
                        </select>
                    </div>

                    <div class="col-md-3">
                        <label for="positionFilter" class="form-label">Position</label>
                        <select class="form-select" id="positionFilter">
                            <option value="all" selected>All Positions</option>
                            <option value="Point Guard">Point Guard</option>
                            <option value="Shooting Guard">Shooting Guard</option>
                            <option value="Small Forward">Small Forward</option>
                            <option value="Power Forward">Power Forward</option>
                            <option value="Center">Center</option>
                        </select>
                    </div>

                    <div class="col-md-3">
                        <label for="joinDateFilter" class="form-label">Join Date</label>
                        <select class="form-select" id="joinDateFilter">
                            <option value="all" selected>All Time</option>
                            <option value="this-month">This Month</option>
                            <option value="last-3-months">Last 3 Months</option>
                            <option value="last-6-months">Last 6 Months</option>
                            <option value="this-year">This Year</option>
                        </select>
                    </div>
                </div>

                <div class="mt-3" id="activeFilters">
                    <span class="badge bg-secondary me-2">Active Filters:</span>
                    <span class="text-muted filter-none">None</span>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-12 text-end">
            <button type="button" class="btn btn-orange" data-bs-toggle="modal" data-bs-target="#addClientModal">
                <i class="bi bi-plus-circle me-2"></i>Add Client
            </button>
        </div>
    </div>

    <!-- DataTable -->
    @if (Model?.Clients != null && Model.Clients.Any())
    {
        <div class="card shadow-sm">
            <div class="card-body">
                <table id="clientsTable" class="table table-striped table-hover w-100">
                    <thead>
                        <tr>
                            <th>Client</th>
                            <th>Date Joined</th>
                            <th>Address</th>
                            <th>Phone#</th>
                            <th>Signed Up Date</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.Clients)
                        {
                            // Get client initials
                            string clientInitials = "NA";
                            if (!string.IsNullOrEmpty(item.Client.Name))
                            {
                                var names = item.Client.Name.Split(' ');
                                if (names.Length >= 2)
                                {
                                    clientInitials = $"{names[0][0]}{names[1][0]}";
                                }
                                else if (names.Length == 1 && names[0].Length > 0)
                                {
                                    clientInitials = names[0][0].ToString();
                                }
                            }

                            <tr>
                                <td>
                                    <div class="client-container">
                                        <div class="client-avatar">@clientInitials</div>
                                        <div>
                                            <div class="fw-semibold">@item.Client.Name</div>
                                            <div class="text-muted small">ID: #@item.Client.ClientNumber</div>
                                        </div>
                                    </div>
                                </td>
                                <td>@item.Client.CreatedDate</td>
                                <td>@item.Client.Address, @item.Client.City, @item.Client.State, @item.Client.Zip</td>
                                <td>@item.Client.PhoneNumber</td>
                                <td>@item.Client.CreatedDate</td>
                                <td>
                                    <div class="table-actions">
                                        <button type="button" class="btn btn-sm btn-outline-primary action-icon" data-bs-toggle="modal" data-bs-target="#editClientModal" data-client-id="@item.Client.ClientId" title="Edit">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        <a href="@Url.Action("Details", "Client", new { id = item.Client.ClientId })" class="btn btn-sm btn-primary action-icon" title="View">
                                            <i class="bi bi-eye"></i>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else
    {
        <div class="no-clients-message">
            <i class="bi bi-people" style="font-size: 3rem; color: var(--secondary-color);"></i>
            <h3 class="mt-3">No Clients Found</h3>
            <p class="text-muted">There are no clients available at the moment. Add a new client to get started!</p>
            <button type="button" class="btn btn-orange mt-3" data-bs-toggle="modal" data-bs-target="#addClientModal">
                <i class="bi bi-plus-circle me-2"></i>Add Client
            </button>
        </div>
    }
</div>

<!-- Add Client Modal -->
<div class="modal fade" id="addClientModal" tabindex="-1" aria-labelledby="addClientModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addClientModalLabel">Add New Client</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="addClientForm" method="post" action="@Url.Action("Create", "Client")">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="addFirstName" class="form-label">First Name</label>
                            <input type="text" class="form-control" id="addFirstName" name="FirstName" required>
                        </div>
                        <div class="col-md-6">
                            <label for="addLastName" class="form-label">Last Name</label>
                            <input type="text" class="form-control" id="addLastName" name="LastName" required>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-12">
                            <label for="addAddress" class="form-label">Address</label>
                            <input type="text" class="form-control" id="addAddress" name="Address" required>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="addCity" class="form-label">City</label>
                            <input type="text" class="form-control" id="addCity" name="City" required>
                        </div>
                        <div class="col-md-4">
                            <label for="addState" class="form-label">State</label>
                            <input type="text" class="form-control" id="addState" name="State">
                        </div>
                        <div class="col-md-4">
                            <label for="addZip" class="form-label">Zip</label>
                            <input type="text" class="form-control" id="addZip" name="Zip" required>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="addPhoneNumber" class="form-label">Phone Number</label>
                            <input type="tel" class="form-control" id="addPhoneNumber" name="PhoneNumber">
                        </div>
                        <div class="col-md-6">
                            <label for="addEmail" class="form-label">Email</label>
                            <input type="email" class="form-control" id="addEmail" name="Email">
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="addNotes" class="form-label">Notes</label>
                        <textarea class="form-control" id="addNotes" name="Notes" rows="3" placeholder="Training goals, preferences, medical notes, etc."></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-orange">Add Client</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Client Modal -->
<div class="modal fade" id="editClientModal" tabindex="-1" aria-labelledby="editClientModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editClientModalLabel">Edit Client</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <ul class="nav nav-tabs" id="editClientTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="details-tab" data-bs-toggle="tab" data-bs-target="#details-tab-pane" type="button" role="tab" aria-controls="details-tab-pane" aria-selected="true">Details</button>
                    </li>
                    <!-- Courts Tab -->
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="courts-tab" data-bs-toggle="tab" data-bs-target="#courts-tab-pane" type="button" role="tab" aria-controls="courts-tab-pane" aria-selected="false">Courts</button>
                    </li>
                </ul>
                <div class="tab-content" id="editClientTabContent">
                    <div class="tab-pane fade show active" id="details-tab-pane" role="tabpanel" aria-labelledby="details-tab" tabindex="0">
                        <form id="editClientForm" method="post" action="@Url.Action("Edit", "Client")" class="mt-4">
                            @Html.AntiForgeryToken()
                            <input type="hidden" id="editClientId" name="ClientId" value="" />
                            <input type="hidden" id="editClientNumber" name="ClientNumber" value="" />
                            <input type="hidden" id="editCreatedDate" name="CreatedDate" value="" />

                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="editFirstName" class="form-label">First Name</label>
                                    <input type="text" class="form-control" id="editFirstName" name="FirstName" required>
                                </div>
                                <div class="col-md-6">
                                    <label for="editLastName" class="form-label">Last Name</label>
                                    <input type="text" class="form-control" id="editLastName" name="LastName" required>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-12">
                                    <label for="editAddress" class="form-label">Address</label>
                                    <input type="text" class="form-control" id="editAddress" name="Address" required>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-4">
                                    <label for="editCity" class="form-label">City</label>
                                    <input type="text" class="form-control" id="editCity" name="City" required>
                                </div>
                                <div class="col-md-4">
                                    <label for="editState" class="form-label">State</label>
                                    <input type="text" class="form-control" id="editState" name="State">
                                </div>
                                <div class="col-md-4">
                                    <label for="editZip" class="form-label">Zip</label>
                                    <input type="text" class="form-control" id="editZip" name="Zip" required>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="editPhoneNumber" class="form-label">Phone Number</label>
                                    <input type="tel" class="form-control" id="editPhoneNumber" name="PhoneNumber">
                                </div>
                                <div class="col-md-6">
                                    <label for="editEmail" class="form-label">Email</label>
                                    <input type="email" class="form-control" id="editEmail" name="Email">
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="editNotes" class="form-label">Notes</label>
                                <textarea class="form-control" id="editNotes" name="Notes" rows="3" placeholder="Training goals, preferences, medical notes, etc."></textarea>
                            </div>

                            <div class="modal-footer">
                                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-danger me-auto" id="deleteClientBtn">Delete Client</button>
                                <button type="submit" class="btn btn-orange">Save Changes</button>
                            </div>
                        </form>
                    </div>

                    <!-- Courts Tab Content -->
                    <div class="tab-pane fade" id="courts-tab-pane" role="tabpanel" aria-labelledby="courts-tab" tabindex="0">
                        <div class="mt-4">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h6 class="mb-0">Preferred Courts</h6>
                                <button class="btn btn-sm btn-outline-primary" id="addCourtBtn">
                                    <i class="bi bi-plus-circle me-1"></i>Add Court
                                </button>
                            </div>
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead>
                                        <tr>
                                            <th>Court Name</th>
                                            <th>Location</th>
                                            <th>Type</th>
                                            <th>Preferred</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody id="courtsTableBody">
                                        <!-- Court data will be displayed here -->
                                        <tr>
                                            <td colspan="5" class="text-center py-4 text-muted">
                                                Loading courts...
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Client Confirmation Modal -->
<div class="modal fade" id="deleteClientModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Deletion</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this client? This action cannot be undone.</p>
                <p class="text-danger"><strong>Note:</strong> All related data for this client will be permanently deleted.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                <form id="deleteClientForm" method="post" action="@Url.Action("Delete", "Client")">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="deleteClientId" name="id" value="" />
                    <button type="submit" class="btn btn-danger">Delete Client</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script type="text/javascript" src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/1.11.5/js/dataTables.bootstrap5.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/responsive/2.2.9/js/dataTables.responsive.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/responsive/2.2.9/js/responsive.bootstrap5.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/buttons/2.2.2/js/dataTables.buttons.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/buttons/2.2.2/js/buttons.bootstrap5.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/buttons/2.2.2/js/buttons.html5.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize DataTable
            const clientsTable = $('#clientsTable').DataTable({
                responsive: true,
                lengthMenu: [[10, 25, 50, -1], [10, 25, 50, "All"]],
                dom: '<"row"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6"f>>rtip',
                language: {
                    search: "_INPUT_",
                    searchPlaceholder: "Search clients...",
                    lengthMenu: "Show _MENU_ clients per page",
                    info: "Showing _START_ to _END_ of _TOTAL_ clients",
                    infoEmpty: "Showing 0 to 0 of 0 clients",
                    infoFiltered: "(filtered from _MAX_ total clients)"
                },
                columnDefs: [
                    { className: "align-middle", targets: "_all" },
                    { orderable: false, targets: [5] } // Disable sorting on the Actions column
                ],
                order: [[1, 'desc']] // Sort by Date Joined column by default (newest first)
            });

            // Filter references
            const statusFilter = $('#statusFilter');
            const skillLevelFilter = $('#skillLevelFilter');
            const positionFilter = $('#positionFilter');
            const joinDateFilter = $('#joinDateFilter');
            const resetFiltersBtn = $('#resetFilters');
            const activeFiltersContainer = $('#activeFilters');

            // Apply filter function
            function applyFilters() {
                // Remove any existing custom filter to prevent stacking
                if ($.fn.dataTable.ext.search.length > 0) {
                    $.fn.dataTable.ext.search.pop();
                }

                // Create a new custom filter function
                $.fn.dataTable.ext.search.push(function(settings, data, dataIndex) {
                    // Only apply this filter to our clientsTable
                    if (settings.nTable.id !== 'clientsTable') return true;

                    // Skip filtering if all filters are set to 'all'
                    if (statusFilter.val() === 'all' &&
                        skillLevelFilter.val() === 'all' &&
                        positionFilter.val() === 'all' &&
                        joinDateFilter.val() === 'all') {
                        return true;
                    }

                    // Get the row element
                    const row = $(clientsTable.row(dataIndex).node());

                    // Status filtering (using data attribute)
                    if (statusFilter.val() !== 'all') {
                        const status = row.attr('data-status') || '';
                        if (status.toLowerCase() !== statusFilter.val().toLowerCase()) {
                            return false;
                        }
                    }

                    // Skill Level filtering (using data attribute)
                    if (skillLevelFilter.val() !== 'all') {
                        const skillLevel = row.attr('data-skill-level') || '';
                        if (skillLevel.toLowerCase() !== skillLevelFilter.val().toLowerCase()) {
                            return false;
                        }
                    }

                    // Position filtering (using data attribute)
                    if (positionFilter.val() !== 'all') {
                        const position = row.attr('data-position') || '';
                        if (position !== positionFilter.val()) {
                            return false;
                        }
                    }

                    // Join Date filtering (column 1 contains the date)
                    if (joinDateFilter.val() !== 'all') {
                        const dateString = data[1];
                        if (!dateString) return true; // Skip if no date

                        try {
                            const joinDate = new Date(dateString);
                            const today = new Date();

                            // Calculate dates for different period filters
                            const thisMonth = new Date(today.getFullYear(), today.getMonth(), 1);

                            const threeMonthsAgo = new Date(today);
                            threeMonthsAgo.setMonth(today.getMonth() - 3);

                            const sixMonthsAgo = new Date(today);
                            sixMonthsAgo.setMonth(today.getMonth() - 6);

                            const thisYear = new Date(today.getFullYear(), 0, 1);

                            switch (joinDateFilter.val()) {
                                case 'this-month':
                                    if (joinDate < thisMonth) {
                                        return false;
                                    }
                                    break;
                                case 'last-3-months':
                                    if (joinDate < threeMonthsAgo) {
                                        return false;
                                    }
                                    break;
                                case 'last-6-months':
                                    if (joinDate < sixMonthsAgo) {
                                        return false;
                                    }
                                    break;
                                case 'this-year':
                                    if (joinDate < thisYear) {
                                        return false;
                                    }
                                    break;
                            }
                        } catch (e) {
                            console.error("Error parsing date:", e);
                            return true; // If date parsing fails, include the row
                        }
                    }

                    // If we got here, the row passes all filters
                    return true;
                });

                // Redraw the table to apply filters
                clientsTable.draw();

                // Update the active filters display
                updateActiveFilters();
            }

            // Update the active filters display
            function updateActiveFilters() {
                // Clear the current active filters display (except the label)
                activeFiltersContainer.find('.filter-badge, .filter-none').remove();

                // Check if any filters are active
                const hasActiveFilters =
                    statusFilter.val() !== 'all' ||
                    skillLevelFilter.val() !== 'all' ||
                    positionFilter.val() !== 'all' ||
                    joinDateFilter.val() !== 'all';

                // If no filters are active, show "None"
                if (!hasActiveFilters) {
                    activeFiltersContainer.append(
                        $('<span>').addClass('text-muted filter-none').text('None')
                    );
                    return;
                }

                // Add badges for active filters
                if (statusFilter.val() !== 'all') {
                    addFilterBadge('Status', formatFilterValue(statusFilter.val()), function() {
                        statusFilter.val('all');
                        applyFilters();
                    });
                }

                if (skillLevelFilter.val() !== 'all') {
                    addFilterBadge('Skill Level', formatFilterValue(skillLevelFilter.val()), function() {
                        skillLevelFilter.val('all');
                        applyFilters();
                    });
                }

                if (positionFilter.val() !== 'all') {
                    addFilterBadge('Position', formatFilterValue(positionFilter.val()), function() {
                        positionFilter.val('all');
                        applyFilters();
                    });
                }

                if (joinDateFilter.val() !== 'all') {
                    addFilterBadge('Join Date', formatFilterValue(joinDateFilter.val()), function() {
                        joinDateFilter.val('all');
                        applyFilters();
                    });
                }
            }

            // Helper function to format filter values for display
            function formatFilterValue(value) {
                return value
                    .split('-')
                    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
                    .join(' ');
            }

            // Add a filter badge to the display
            function addFilterBadge(label, value, removeCallback) {
                const badge = $('<span>')
                    .addClass('badge bg-primary me-2 filter-badge')
                    .text(`${label}: ${value}`);

                const removeBtn = $('<button>')
                    .addClass('btn-close btn-close-white ms-1')
                    .css('font-size', '0.5rem')
                    .on('click', removeCallback);

                badge.append(removeBtn);
                activeFiltersContainer.append(badge);
            }

            // Add event listeners to filters
            statusFilter.on('change', applyFilters);
            skillLevelFilter.on('change', applyFilters);
            positionFilter.on('change', applyFilters);
            joinDateFilter.on('change', applyFilters);

            // Reset filters button
            resetFiltersBtn.on('click', function() {
                statusFilter.val('all');
                skillLevelFilter.val('all');
                positionFilter.val('all');
                joinDateFilter.val('all');
                applyFilters();
            });

            // Initialize with current filter values
            applyFilters();

            // Edit client modal functionality
            const editClientModal = document.getElementById('editClientModal');
            if (editClientModal) {
                editClientModal.addEventListener('show.bs.modal', function(event) {
                    const button = event.relatedTarget;
                    const clientId = button.getAttribute('data-client-id');
                    document.getElementById('editClientId').value = clientId;

                    // Show loading indicator
                    document.getElementById('courtsTableBody').innerHTML = `
                        <tr>
                            <td colspan="5" class="text-center py-4 text-muted">
                                <div class="spinner-border spinner-border-sm text-secondary me-2" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                Loading client data...
                            </td>
                        </tr>`;

                    // Load client data via AJAX
                    fetch(`/Client/GetClientData?id=${clientId}`)
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Network response was not ok');
                            }
                            return response.json();
                        })
                        .then(data => {
                            console.log("Received client data:", data);

                            // Populate form fields
                            document.getElementById('editClientId').value = data.clientId || '';
                            document.getElementById('editClientNumber').value = data.clientNumber || '';
                            document.getElementById('editFirstName').value = data.firstName || '';
                            document.getElementById('editLastName').value = data.lastName || '';
                            document.getElementById('editAddress').value = data.address || '';
                            document.getElementById('editCity').value = data.city || '';
                            document.getElementById('editState').value = data.state || '';
                            document.getElementById('editZip').value = data.zip || '';
                            document.getElementById('editPhoneNumber').value = data.phoneNumber || '';
                            document.getElementById('editEmail').value = data.email || '';
                            document.getElementById('editNotes').value = data.notes || '';
                            document.getElementById('editCreatedDate').value = data.createdDate || '';

                            // Set delete button client ID
                            document.getElementById('deleteClientId').value = data.clientId;

                            // Display court data
                            displayClientCourts(data.courtList || []);
                        })
                        .catch(error => {
                            console.error('Error loading client data:', error);
                            alert('Error loading client data. Please try again.');

                            // Show error in courts table
                            document.getElementById('courtsTableBody').innerHTML = `
                                <tr>
                                    <td colspan="5" class="text-center py-4 text-danger">
                                        <i class="bi bi-exclamation-triangle me-2"></i>
                                        Error loading client data. Please try again.
                                    </td>
                                </tr>`;
                        });
                });
            }

            // Handle delete client button
            const deleteClientBtn = document.getElementById('deleteClientBtn');
            if (deleteClientBtn) {
                deleteClientBtn.addEventListener('click', function() {
                    const clientId = document.getElementById('editClientId').value;
                    document.getElementById('deleteClientId').value = clientId;

                    // Hide edit modal and show delete confirmation modal
                    const editModal = bootstrap.Modal.getInstance(document.getElementById('editClientModal'));
                    editModal.hide();

                    const deleteModal = new bootstrap.Modal(document.getElementById('deleteClientModal'));
                    deleteModal.show();
                });
            }

            // Handle add court button
            const addCourtBtn = document.getElementById('addCourtBtn');
            if (addCourtBtn) {
                addCourtBtn.addEventListener('click', function() {
                    const clientId = document.getElementById('editClientId').value;
                    addClientCourt(clientId);
                });
            }

            // Function to display client courts
            window.displayClientCourts = function(courts) {
                const courtsTableBody = document.getElementById('courtsTableBody');
                if (!courtsTableBody) return;

                if (!courts || courts.length === 0) {
                    courtsTableBody.innerHTML = `
                        <tr>
                            <td colspan="5" class="text-center py-4 text-muted">
                                No courts associated with this client.
                            </td>
                        </tr>`;
                    return;
                }

                let html = '';
                courts.forEach(court => {
                    html += `
                        <tr>
                            <td>${court.name || 'N/A'}</td>
                            <td>${court.location || 'N/A'}</td>
                            <td>${court.type || 'N/A'}</td>
                            <td>
                                <span class="badge ${court.isPreferred ? 'bg-success' : 'bg-secondary'}">
                                    ${court.isPreferred ? 'Yes' : 'No'}
                                </span>
                            </td>
                            <td>
                                <div class="btn-group btn-group-sm">
                                    <button type="button" class="btn btn-outline-primary edit-court-btn"
                                            data-court-id="${court.courtId}"
                                            data-bs-toggle="tooltip"
                                            title="Edit Court">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button type="button" class="btn btn-outline-danger remove-court-btn"
                                            data-court-id="${court.courtId}"
                                            data-bs-toggle="tooltip"
                                            title="Remove Court">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>`;
                });

                courtsTableBody.innerHTML = html;

                // Add event listeners to court action buttons
                document.querySelectorAll('.edit-court-btn').forEach(button => {
                    button.addEventListener('click', function() {
                        const courtId = this.getAttribute('data-court-id');
                        editClientCourt(document.getElementById('editClientId').value, courtId);
                    });
                });

                document.querySelectorAll('.remove-court-btn').forEach(button => {
                    button.addEventListener('click', function() {
                        const courtId = this.getAttribute('data-court-id');
                        removeClientCourt(document.getElementById('editClientId').value, courtId);
                    });
                });

                // Initialize tooltips
                var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
                var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                    return new bootstrap.Tooltip(tooltipTriggerEl)
                });
            }

            // Function to add a new court for the client
            window.addClientCourt = function(clientId) {
                // You can replace this with a modal or inline form
                const courtName = prompt('Enter court name:');
                if (!courtName) return;

                const courtLocation = prompt('Enter court location:');
                if (!courtLocation) return;

                const courtType = prompt('Enter court type (Indoor/Outdoor):');
                if (!courtType) return;

                const isPreferred = confirm('Is this a preferred court?');

                // Create court object
                const courtData = {
                    clientId: clientId,
                    name: courtName,
                    location: courtLocation,
                    type: courtType,
                    isPreferred: isPreferred
                };

                // Get the token from the form
                const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

                // Send to server
                fetch('@Url.Action("AddClientCourt", "Client")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify(courtData)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Reload courts list
                        fetch(`@Url.Action("GetClientData", "Client")?id=${clientId}`)
                            .then(response => response.json())
                            .then(clientData => {
                                displayClientCourts(clientData.courtList || []);
                            })
                            .catch(error => {
                                console.error('Error reloading client data:', error);
                            });
                    } else {
                        alert('Error adding court: ' + (data.message || 'Unknown error'));
                    }
                })
                .catch(error => {
                    console.error('Error adding court:', error);
                    alert('Error adding court. Please try again.');
                });
            }

            // Function to edit a client court
            window.editClientCourt = function(clientId, courtId) {
                // Get current court data first
                fetch(`@Url.Action("GetCourtData", "Client")?courtId=${courtId}`)
                    .then(response => response.json())
                    .then(court => {
                        // Prompt for updated values
                        const courtName = prompt('Court name:', court.name || '');
                        if (courtName === null) return;

                        const courtLocation = prompt('Court location:', court.location || '');
                        if (courtLocation === null) return;

                        const courtType = prompt('Court type (Indoor/Outdoor):', court.type || '');
                        if (courtType === null) return;

                        const isPreferred = confirm('Is this a preferred court?');

                        // Create updated court object
                        const courtData = {
                            courtId: courtId,
                            clientId: clientId,
                            name: courtName,
                            location: courtLocation,
                            type: courtType,
                            isPreferred: isPreferred
                        };

                        // Get the token from the form
                        const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

                        // Send to server
                        fetch('@Url.Action("UpdateClientCourt", "Client")', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': token
                            },
                            body: JSON.stringify(courtData)
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // Reload courts list
                                fetch(`@Url.Action("GetClientData", "Client")?id=${clientId}`)
                                    .then(response => response.json())
                                    .then(clientData => {
                                        displayClientCourts(clientData.courtList || []);
                                    })
                                    .catch(error => {
                                        console.error('Error reloading client data:', error);
                                    });
                            } else {
                                alert('Error updating court: ' + (data.message || 'Unknown error'));
                            }
                        })
                        .catch(error => {
                            console.error('Error updating court:', error);
                            alert('Error updating court. Please try again.');
                        });
                    })
                    .catch(error => {
                        console.error('Error getting court data:', error);
                        alert('Error getting court data. Please try again.');
                    });
            }

            // Function to remove a client court
            window.removeClientCourt = function(clientId, courtId) {
                if (!confirm('Are you sure you want to remove this court?')) {
                    return;
                }

                // Get the token from the form
                const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

                fetch('@Url.Action("RemoveClientCourt", "Client")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify({ clientId, courtId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Reload courts list
                        fetch(`@Url.Action("GetClientData", "Client")?id=${clientId}`)
                            .then(response => response.json())
                            .then(clientData => {
                                displayClientCourts(clientData.courtList || []);
                            })
                            .catch(error => {
                                console.error('Error reloading client data:', error);
                            });
                    } else {
                        alert('Error removing court: ' + (data.message || 'Unknown error'));
                    }
                })
                .catch(error => {
                    console.error('Error removing court:', error);
                    alert('Error removing court. Please try again.');
                });
            }
        });
    </script>
}