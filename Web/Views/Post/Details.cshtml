@model Domain.Post

@{
    ViewData["Title"] = Model?.Title ?? "Post Details";
    var userType = ViewData["UserType"]?.ToString() ?? "User";
}

@section Styles {
    <style>
        :root {
            --primary-color: #FF6B00;
            --secondary-color: #1C2C5B;
            --accent-color: #3BACB6;
            --light-color: #F8F9FA;
            --dark-color: #212529;
        }

        .post-hero {
            background: linear-gradient(135deg, var(--secondary-color) 0%, #0b1733 100%);
            color: white;
            padding: 3rem 0;
            margin-bottom: 2rem;
        }

        .post-media-container {
            position: relative;
            margin-bottom: 2rem;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }

        .post-image {
            width: 100%;
            height: auto;
            max-height: 600px;
            object-fit: cover;
            display: block;
        }

        .post-video {
            width: 100%;
            height: auto;
            max-height: 600px;
            border-radius: 15px;
        }

        .media-placeholder {
            background: linear-gradient(45deg, #f8f9fa, #e9ecef);
            min-height: 300px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #6c757d;
            font-size: 1.2rem;
            border-radius: 15px;
        }

        .post-content {
            background: white;
            border-radius: 15px;
            padding: 2rem;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
            margin-bottom: 2rem;
        }

        .post-meta {
            background: var(--light-color);
            border-radius: 10px;
            padding: 1.5rem;
            margin-bottom: 2rem;
        }

        .meta-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.5rem 0;
            border-bottom: 1px solid #dee2e6;
        }

            .meta-item:last-child {
                border-bottom: none;
            }

        .meta-label {
            font-weight: 600;
            color: var(--dark-color);
        }

        .meta-value {
            color: #6c757d;
        }

        .post-stats {
            display: flex;
            gap: 2rem;
            justify-content: center;
            margin: 2rem 0;
        }

        .stat-item {
            text-align: center;
            padding: 1rem;
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            flex: 1;
            max-width: 150px;
        }

        .stat-number {
            font-size: 2rem;
            font-weight: 700;
            color: var(--primary-color);
            display: block;
        }

        .stat-label {
            color: #6c757d;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .post-actions {
            display: flex;
            gap: 1rem;
            justify-content: center;
            margin: 2rem 0;
        }

        .action-btn {
            padding: 0.75rem 1.5rem;
            border-radius: 50px;
            border: none;
            font-weight: 600;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-like {
            background: linear-gradient(135deg, #ff6b6b, #ee5a52);
            color: white;
        }

            .btn-like:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(238, 90, 82, 0.4);
                color: white;
            }

        .btn-share {
            background: linear-gradient(135deg, #4ecdc4, #44a08d);
            color: white;
        }

            .btn-share:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(78, 205, 196, 0.4);
                color: white;
            }

        .btn-comment {
            background: linear-gradient(135deg, #45b7d1, #96c93d);
            color: white;
        }

            .btn-comment:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(69, 183, 209, 0.4);
                color: white;
            }

        .back-button {
            margin-bottom: 2rem;
        }

        .post-badge {
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .badge-news {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

        .badge-event {
            background: linear-gradient(135deg, #f093fb, #f5576c);
            color: white;
        }

        .badge-user {
            background: linear-gradient(135deg, #4facfe, #00f2fe);
            color: white;
        }

        .badge-active {
            background: linear-gradient(135deg, #43e97b, #38f9d7);
            color: #2d3748;
        }

        .badge-draft {
            background: linear-gradient(135deg, #ffeaa7, #fab1a0);
            color: #2d3748;
        }

        .post-content-text {
            line-height: 1.8;
            font-size: 1.1rem;
            color: #4a5568;
        }

            .post-content-text h1,
            .post-content-text h2,
            .post-content-text h3,
            .post-content-text h4,
            .post-content-text h5,
            .post-content-text h6 {
                color: var(--dark-color);
                margin: 1.5rem 0 1rem 0;
            }

            .post-content-text p {
                margin-bottom: 1rem;
            }

            .post-content-text ul,
            .post-content-text ol {
                margin-bottom: 1rem;
                padding-left: 2rem;
            }

            .post-content-text blockquote {
                border-left: 4px solid var(--primary-color);
                padding-left: 1rem;
                margin: 1.5rem 0;
                font-style: italic;
                color: #6c757d;
            }

        .author-info {
            display: flex;
            align-items: center;
            gap: 1rem;
            padding: 1rem;
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            margin-bottom: 2rem;
        }

        .author-avatar {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: var(--secondary-color);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 1.5rem;
        }

        .author-details h6 {
            margin: 0;
            color: var(--dark-color);
        }

        .author-details small {
            color: #6c757d;
        }

        @@media (max-width: 768px) {
            .post-hero

        {
            padding: 2rem 0;
        }

        .post-content {
            padding: 1.5rem;
        }

        .post-stats {
            gap: 1rem;
        }

        .post-actions {
            flex-direction: column;
            align-items: center;
        }

        .action-btn {
            width: 100%;
            max-width: 250px;
            justify-content: center;
        }

        }

        /* Lightbox styles for image viewing */
        .lightbox {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            z-index: 9999;
            cursor: pointer;
        }

            .lightbox img {
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                max-width: 90%;
                max-height: 90%;
                object-fit: contain;
            }

        .lightbox-close {
            position: absolute;
            top: 20px;
            right: 30px;
            color: white;
            font-size: 2rem;
            cursor: pointer;
            z-index: 10000;
        }
    </style>
}

<div class="post-hero">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-md-8">
                <h1 class="display-5 fw-bold mb-3">@(Model?.Title ?? "Post Details")</h1>
                <p class="lead mb-0">@(Model?.Caption ?? "No description available")</p>
            </div>
            <div class="col-md-4 text-md-end">
                @if (!string.IsNullOrEmpty(Model?.PostType))
                {
                    <span class="post-badge badge-@(Model.PostType.ToLower())">@Model.PostType</span>
                }
                @if (!string.IsNullOrEmpty(Model?.Status))
                {
                    <span class="post-badge badge-@(Model.Status.ToLower()) ms-2">@Model.Status</span>
                }
            </div>
        </div>
    </div>
</div>

<div class="container">
    <!-- Back button -->
    <div class="back-button">
        <a href="@Url.Action("Post", "Post")" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left me-2"></i>Back to Posts
        </a>
    </div>

    <div class="row">
        <div class="col-lg-8">
            <!-- Media Section -->
            @if (!string.IsNullOrEmpty(Model?.PostFileURL))
            {
                <div class="post-media-container">
                    @{
                        var fileExtension = System.IO.Path.GetExtension(Model.PostFileURL)?.ToLower();
                        var videoExtensions = new[] { ".mp4", ".webm", ".ogg", ".avi", ".mov" };
                        var imageExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif", ".webp", ".bmp" };
                    }

                    @if (videoExtensions.Contains(fileExtension))
                    {
                        <!-- Video Display -->
                        <video class="post-video" controls poster="@Model.ThumbnailUrl">
                            <source src="@Model.PostFileURL" type="video/@(fileExtension.Substring(1))">
                            Your browser does not support the video tag.
                        </video>
                    }
                    else if (imageExtensions.Contains(fileExtension) || string.IsNullOrEmpty(fileExtension))
                    {
                        <!-- Image Display -->
                        <img src="@(Model.ThumbnailUrl ?? Model.PostFileURL)"
                             alt="@Model.Title"
                             class="post-image clickable-image"
                             data-full-image="@Model.PostFileURL"
                             loading="lazy"
                             onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                        <div class="media-placeholder" style="display: none;">
                            <div class="text-center">
                                <i class="bi bi-image" style="font-size: 3rem;"></i>
                                <p class="mt-2 mb-0">Image not available</p>
                            </div>
                        </div>
                    }
                    else
                    {
                        <!-- Unknown file type -->
                        <div class="media-placeholder">
                            <div class="text-center">
                                <i class="bi bi-file-earmark" style="font-size: 3rem;"></i>
                                <p class="mt-2 mb-0">Media file: @System.IO.Path.GetFileName(Model.PostFileURL)</p>
                                <a href="@Model.PostFileURL" target="_blank" class="btn btn-primary mt-2">
                                    <i class="bi bi-download me-2"></i>Download
                                </a>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <!-- No media placeholder -->
                <div class="post-media-container">
                    <div class="media-placeholder">
                        <div class="text-center">
                            <i class="bi bi-image" style="font-size: 3rem;"></i>
                            <p class="mt-2 mb-0">No media attached to this post</p>
                        </div>
                    </div>
                </div>
            }

            <!-- Post Content -->
            <div class="post-content">
                <div class="post-content-text">
                    @if (!string.IsNullOrEmpty(Model?.PostText))
                    {
                        @Html.Raw(Model.PostText)
                    }
                    else if (!string.IsNullOrEmpty(Model?.Caption))
                    {
                        <p>@Model.Caption</p>
                    }
                    else
                    {
                        <p class="text-muted">No content available for this post.</p>
                    }
                </div>
            </div>

            <!-- Post Actions -->
            <div class="post-actions">
                <button class="action-btn btn-like" onclick="likePost('@Model?.PostId')">
                    <i class="bi bi-heart"></i>
                    <span>Like</span>
                </button>
                <button class="action-btn btn-comment" onclick="showComments()">
                    <i class="bi bi-chat"></i>
                    <span>Comment</span>
                </button>
                <button class="action-btn btn-share" onclick="sharePost('@Model?.PostId')">
                    <i class="bi bi-share"></i>
                    <span>Share</span>
                </button>
            </div>

            <!-- Post Stats -->
            <div class="post-stats">
                <div class="stat-item">
                    <span class="stat-number" id="viewsCount">@(Model?.Views ?? new Random().Next(50, 1000))</span>
                    <span class="stat-label">Views</span>
                </div>
                <div class="stat-item">
                    <span class="stat-number" id="likesCount">@(Model?.Likes ?? new Random().Next(5, 100))</span>
                    <span class="stat-label">Likes</span>
                </div>
                <div class="stat-item">
                    <span class="stat-number" id="commentsCount">@(Model?.PostCommentCount ?? new Random().Next(0, 50))</span>
                    <span class="stat-label">Comments</span>
                </div>
                <div class="stat-item">
                    <span class="stat-number" id="sharesCount">@(new Random().Next(0, 25))</span>
                    <span class="stat-label">Shares</span>
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <!-- Author Info -->
            <div class="author-info">
                <div class="author-avatar">
                    @{
                        var authorInitials = "A";
                        if (!string.IsNullOrEmpty(Model?.FirstName) && !string.IsNullOrEmpty(Model?.LastName))
                        {
                            authorInitials = $"{Model.FirstName[0]}{Model.LastName[0]}";
                        }
                        else if (!string.IsNullOrEmpty(Model?.ProfileId))
                        {
                            authorInitials = Model.ProfileId.Substring(0, Math.Min(2, Model.ProfileId.Length)).ToUpper();
                        }
                    }
                    @authorInitials
                </div>
                <div class="author-details">
                    <h6>@(Model?.FirstName + " " + Model?.LastName ?? Model?.ProfileId ?? "Unknown Author")</h6>
                    <small class="text-muted">@(Model?.UserName ?? "Author")</small>
                </div>
            </div>

            <!-- Post Meta -->
            <div class="post-meta">
                <h6 class="fw-bold mb-3">Post Information</h6>

                <div class="meta-item">
                    <span class="meta-label">Posted Date:</span>
                    <span class="meta-value">@(Model?.PostedDate?.ToString("MMM dd, yyyy") ?? "Unknown")</span>
                </div>

                <div class="meta-item">
                    <span class="meta-label">Post Type:</span>
                    <span class="meta-value">@(Model?.PostType ?? "General")</span>
                </div>

                <div class="meta-item">
                    <span class="meta-label">Status:</span>
                    <span class="meta-value">@(Model?.Status ?? "Active")</span>
                </div>

                @if (!string.IsNullOrEmpty(Model?.Category))
                {
                    <div class="meta-item">
                        <span class="meta-label">Category:</span>
                        <span class="meta-value">@Model.Category</span>
                    </div>
                }

                @if (!string.IsNullOrEmpty(Model?.Type))
                {
                    <div class="meta-item">
                        <span class="meta-label">Type:</span>
                        <span class="meta-value">@Model.Type</span>
                    </div>
                }

                <div class="meta-item">
                    <span class="meta-label">Post ID:</span>
                    <span class="meta-value">@(Model?.PostId ?? "N/A")</span>
                </div>
            </div>

            <!-- Admin Actions (if user is admin) -->
            @if (userType == "Admin" || Model?.ProfileId == ViewContext.HttpContext.Session.GetString("ProfileId"))
            {
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0">Admin Actions</h6>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-2">
                            <a href="@Url.Action("Edit", "Post", new { id = Model?.PostId })" class="btn btn-outline-primary">
                                <i class="bi bi-pencil me-2"></i>Edit Post
                            </a>
                            <button class="btn btn-outline-danger" onclick="deletePost('@Model?.PostId')">
                                <i class="bi bi-trash me-2"></i>Delete Post
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Image Lightbox -->
<div id="imageLightbox" class="lightbox">
    <span class="lightbox-close">&times;</span>
    <img id="lightboxImage" src="" alt="Full size image">
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this post? This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form id="deleteForm" method="post" action="@Url.Action("Delete", "Post")">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="id" value="@Model?.PostId" />
                    <button type="submit" class="btn btn-danger">Delete Post</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize image lightbox
            initializeImageLightbox();

            // Update view count
            updateViewCount('@Model?.PostId');
        });

        // Image lightbox functionality
        function initializeImageLightbox() {
            const clickableImages = document.querySelectorAll('.clickable-image');
            const lightbox = document.getElementById('imageLightbox');
            const lightboxImage = document.getElementById('lightboxImage');
            const closeBtn = document.querySelector('.lightbox-close');

            clickableImages.forEach(img => {
                img.addEventListener('click', function() {
                    const fullImageSrc = this.getAttribute('data-full-image') || this.src;
                    lightboxImage.src = fullImageSrc;
                    lightbox.style.display = 'block';
                });
            });

            // Close lightbox
            closeBtn.addEventListener('click', closeLightbox);
            lightbox.addEventListener('click', function(e) {
                if (e.target === lightbox) {
                    closeLightbox();
                }
            });

            // Close with escape key
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    closeLightbox();
                }
            });

            function closeLightbox() {
                lightbox.style.display = 'none';
                lightboxImage.src = '';
            }
        }

        // Update view count
        function updateViewCount(postId) {
            if (!postId) return;

            fetch(`/Post/UpdateViewCount?id=${postId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                }
            }).catch(error => {
                console.log('Could not update view count:', error);
            });
        }

        // Like post functionality
        function likePost(postId) {
            if (!postId) return;

            const likeBtn = document.querySelector('.btn-like');
            const likesCount = document.getElementById('likesCount');

            fetch(`/Post/LikePost?id=${postId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    likesCount.textContent = data.likeCount;
                    likeBtn.classList.add('liked');
                    showToast('Post liked!', 'success');
                }
            })
            .catch(error => {
                console.error('Error liking post:', error);
                // Simulate like for demo
                const currentLikes = parseInt(likesCount.textContent);
                likesCount.textContent = currentLikes + 1;
                likeBtn.classList.add('liked');
                showToast('Post liked!', 'success');
            });
        }

        // Share post functionality
        function sharePost(postId) {
            if (navigator.share) {
                navigator.share({
                    title: '@Model?.Title',
                    text: '@Model?.Caption',
                    url: window.location.href
                }).catch(console.error);
            } else {
                // Fallback: copy to clipboard
                navigator.clipboard.writeText(window.location.href).then(() => {
                    showToast('Post URL copied to clipboard!', 'success');
                }).catch(() => {
                    showToast('Could not copy URL', 'error');
                });
            }
        }

        // Show comments (placeholder)
        function showComments() {
            showToast('Comments feature coming soon!', 'info');
        }

        // Delete post
        function deletePost(postId) {
            const modal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
            modal.show();
        }

        // Toast notification function
        function showToast(message, type = 'success') {
            // Create toast container if it doesn't exist
            let container = document.querySelector('.toast-container');
            if (!container) {
                container = document.createElement('div');
                container.className = 'toast-container position-fixed bottom-0 end-0 p-3';
                container.style.zIndex = '9999';
                document.body.appendChild(container);
            }

            const toastId = `toast-${Date.now()}`;
            const iconClass = {
                'success': 'bi-check-circle',
                'error': 'bi-exclamation-triangle',
                'warning': 'bi-exclamation-triangle',
                'info': 'bi-info-circle'
            }[type] || 'bi-info-circle';

            const toastHtml = `
                <div id="${toastId}" class="toast align-items-center text-white bg-${type === 'error' ? 'danger' : type} border-0" role="alert">
                    <div class="d-flex">
                        <div class="toast-body">
                            <i class="bi ${iconClass} me-2"></i>
                            ${message}
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                    </div>
                </div>
            `;

            container.insertAdjacentHTML('beforeend', toastHtml);

            const toastElement = document.getElementById(toastId);
            const toast = new bootstrap.Toast(toastElement, {
                autohide: type !== 'error',
                delay: 3000
            });
            toast.show();

            toastElement.addEventListener('hidden.bs.toast', () => {
                toastElement.remove();
            });
        }
    </script>
}