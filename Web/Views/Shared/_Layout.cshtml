@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@inject Website.Services.AuthenticationService AuthService

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Ultimate Hoopers</title>
    <script type="importmap"></script>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/Web.styles.css" asp-append-version="true" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <script src="~/js/loginspinner.js" asp-append-version="true"></script>
    <style>
        /* Login Button Loading State */
        .btn-loading {
            position: relative;
            pointer-events: none;
        }

        /* Shake Animation for Login Errors */
        @@keyframes shake {
            0%, 100%

        {
            transform: translateX(0);
        }

        10%, 30%, 50%, 70%, 90% {
            transform: translateX(-5px);
        }

        20%, 40%, 60%, 80% {
            transform: translateX(5px);
        }

        }

        .shake-animation {
            animation: shake 0.6s ease-in-out;
        }

        /* Enhanced Spinner */
        .spinner-border-sm {
            width: 1rem;
            height: 1rem;
            border-width: 0.125em;
        }

        /* Login Form Enhancements */
        #loginModal .form-control:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(255, 98, 56, 0.25);
        }

        #loginModal .form-control.is-valid {
            border-color: #28a745;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%2328a745' d='m2.3 6.73.94-.94 1.38 1.38 3.17-3.17.94.94-4.11 4.11z'/%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right calc(0.375em + 0.1875rem) center;
            background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
        }

        #loginModal .form-control.is-invalid {
            border-color: #dc3545;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath d='m5.8 4.6 1.4 1.4 1.4-1.4'/%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right calc(0.375em + 0.1875rem) center;
            background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
        }

        /* Success Button State */
        .btn-success {
            background-color: #28a745 !important;
            border-color: #28a745 !important;
        }

        /* Error Message Animation */
        .login-error-message {
            animation: slideInDown 0.3s ease-out;
        }

        @@keyframes slideInDown {
            from

        {
            transform: translateY(-20px);
            opacity: 0;
        }

        to {
            transform: translateY(0);
            opacity: 1;
        }

        }

        /* Demo Button Enhancement */
        .btn-outline-secondary:hover {
            background-color: #6c757d;
            border-color: #6c757d;
            color: white;
        }

        /* Loading overlay for modal if needed */
        .modal-loading-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1050;
        }

        /* Responsive improvements */
        @@media (max-width: 576px) {
            #loginModal .modal-dialog

        {
            margin: 1rem 0.5rem;
        }

        #loginModal .btn {
            padding: 0.5rem 1rem;
            font-size: 0.875rem;
        }

        #loginModal .form-control {
            font-size: 16px; /* Prevents zoom on iOS */
        }

        }
    </style>


    @await RenderSectionAsync("Styles", required: false)
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-light bg-white border-bottom box-shadow sticky-top">
            <div class="container">
                <a class="navbar-brand d-flex align-items-center" asp-area="" asp-controller="Home" asp-action="Index">
                    <i class="bi bi-arrow-clockwise text-orange me-2"></i>
                    <span class="fw-bold">Ultimate Hoopers</span>
                </a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                        </li>

                        @if (AuthService.IsAuthenticated)
                        {
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-controller="Dashboard" asp-action="Dashboard">Dashboard</a>
                            </li>

                            @if (AuthService.IsAdmin)
                            {
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-controller="Dashboard" asp-action="Client">Clients</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-controller="Dashboard" asp-action="User">Users</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-controller="Dashboard" asp-action="Run">Runs</a>
                                </li>
                            }
                        }
                        else
                        {
                            <li class="nav-item">
                                <a class="nav-link text-dark" href="/#features">Features</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" href="/#download">Download</a>
                            </li>
                        }

                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
                        </li>
                    </ul>
                    <div class="d-flex">
                        @if (AuthService.IsAuthenticated)
                        {
                            <div class="dropdown me-2">
                                <button class="btn btn-outline-primary dropdown-toggle" type="button" id="userDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="bi bi-person-circle me-1"></i> @HttpContextAccessor.HttpContext.Session.GetString("UserName")
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userDropdown">
                                    <li><a class="dropdown-item" href="#"><i class="bi bi-person me-2"></i>Profile</a></li>
                                    <li><a class="dropdown-item" href="#"><i class="bi bi-gear me-2"></i>Settings</a></li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li><a class="dropdown-item text-danger" asp-controller="Account" asp-action="Logout"><i class="bi bi-box-arrow-right me-2"></i>Logout</a></li>
                                </ul>
                            </div>
                        }
                        else
                        {
                            <button class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#loginModal">
                                <i class="bi bi-person me-1"></i> Login
                            </button>
                        }
                    </div>
                </div>
            </div>
        </nav>
    </header>

    <!-- MODERN PURPLE SPINNER OVERLAY -->
    <div id="loginSpinner">
        <div class="spinner-content">
            <div class="spinner-border custom-spinner" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <h5 id="spinnerMessage">Please wait...</h5>
            <p style="color: #6c757d; font-size: 0.9rem; margin-top: 0.5rem; margin-bottom: 0;">This will only take a moment</p>
        </div>
    </div>

    <!-- PURPLE EMERGENCY BACKUP SPINNER - NO CIRCLE -->
    <div id="emergencySpinner" class="emergency-spinner">
        <div class="spinner-border" role="status" style="width: 3rem; height: 3rem; border-width: 4px; border-color: #342580; border-right-color: transparent; border-top-color: transparent;">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>



    <!-- Login Modal -->
    <div class="modal fade" id="loginModal" tabindex="-1" aria-labelledby="loginModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header modal-header-navy">
                    <h5 class="modal-title" id="loginModalLabel">Log in to Ultimate Hoopers</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <ul class="nav nav-tabs" id="loginTabs" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="client-tab" data-bs-toggle="tab" data-bs-target="#client-login" type="button" role="tab" aria-controls="client-login" aria-selected="true">Client</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="admin-tab" data-bs-toggle="tab" data-bs-target="#admin-login" type="button" role="tab" aria-controls="admin-login" aria-selected="false">Admin</button>
                        </li>
                    </ul>
                    <div class="tab-content" id="loginTabsContent">
                        <div class="tab-pane fade show active" id="client-login" role="tabpanel" aria-labelledby="client-tab">
                            <form asp-controller="Account" asp-action="ClientLogin" method="post" onsubmit="showSpinner('Logging in as Client...'); return true;">
                                <input type="hidden" name="returnUrl" id="clientReturnUrl" value="@Context.Request.Path@Context.Request.QueryString" />
                                <div class="mb-3 mt-3">
                                    <label for="clientEmail" class="form-label">Email Address</label>
                                    <input type="email" class="form-control" id="clientEmail" name="email" required>
                                    <div class="form-text">Demo: any @@@("client.com") email, password: client123</div>
                                </div>
                                <div class="mb-3">
                                    <label for="clientPassword" class="form-label">Password</label>
                                    <input type="password" class="form-control" id="clientPassword" name="password" required>
                                </div>
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" value="" id="rememberClientCheck">
                                        <label class="form-check-label" for="rememberClientCheck">
                                            Remember me
                                        </label>
                                    </div>
                                    <a href="#" class="text-orange">Forgot password?</a>
                                </div>
                                <button type="submit" class="btn btn-orange w-100 btn-with-spinner">
                                    <span class="btn-text">Login as Client</span>
                                </button>
                            </form>
                        </div>
                        <div class="tab-pane fade" id="admin-login" role="tabpanel" aria-labelledby="admin-tab">
                            <form asp-controller="Account" asp-action="AdminLogin" method="post" onsubmit="showSpinner('Logging in as Admin...'); return true;">
                                <input type="hidden" name="returnUrl" id="adminReturnUrl" value="@Context.Request.Path@Context.Request.QueryString" />
                                <div class="mb-3 mt-3">
                                    <label for="adminEmail" class="form-label">Email Address</label>
                                    <input type="email" class="form-control" id="adminEmail" name="email" required>
                                    <div class="form-text">Demo: any @@@("company.com") email, password: admin123</div>
                                </div>
                                <div class="mb-3">
                                    <label for="adminPassword" class="form-label">Password</label>
                                    <input type="password" class="form-control" id="adminPassword" name="password" required>
                                </div>
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" value="" id="rememberAdminCheck">
                                        <label class="form-check-label" for="rememberAdminCheck">
                                            Remember me
                                        </label>
                                    </div>
                                    <a href="#" class="text-navy">Forgot password?</a>
                                </div>
                                <button type="submit" class="btn btn-navy w-100 btn-with-spinner">
                                    <span class="btn-text">Login as Admin</span>
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <p class="w-100 text-center mb-0">Don't have an account? <a href="#" class="text-orange">Sign up</a></p>
                </div>
            </div>
        </div>
    </div>

    <div>
        <main role="main">
            @RenderBody()
        </main>
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>

    <script>
        // PURPLE SPINNER SYSTEM
        function showSpinner(message = 'Loading...') {
            console.log('🟣 SHOWING PURPLE SPINNER:', message);

            const spinner = document.getElementById('loginSpinner');
            const messageEl = document.getElementById('spinnerMessage');

            if (!spinner) {
                console.error('❌ Main spinner not found, using emergency');
                showEmergencySpinner();
                return false;
            }

            // Update message
            if (messageEl) {
                messageEl.textContent = message;
            }

            // Show main spinner
            spinner.classList.add('active');
            document.body.style.overflow = 'hidden';

            // Verify it worked
            setTimeout(() => {
                const isVisible = window.getComputedStyle(spinner).display === 'flex';
                console.log(isVisible ? '✅ Purple main spinner shown' : '⚠️ Fallback to emergency');

                if (!isVisible) {
                    spinner.classList.remove('active');
                    showEmergencySpinner();
                }
            }, 100);

            return true;
        }

        function hideSpinner() {
            console.log('🟣 HIDING ALL SPINNERS');

            const main = document.getElementById('loginSpinner');
            const emergency = document.getElementById('emergencySpinner');

            if (main) main.classList.remove('active');
            if (emergency) emergency.classList.remove('active');

            document.body.style.overflow = '';

            // Clean up any loading buttons
            document.querySelectorAll('.btn-loading').forEach(btn => {
                btn.classList.remove('btn-loading');
            });

            console.log('✅ All spinners hidden');
        }

        function showEmergencySpinner() {
            console.log('🟣 SHOWING CLEAN PURPLE SPINNER');
            const emergency = document.getElementById('emergencySpinner');
            if (emergency) {
                emergency.classList.add('active');
                console.log('✅ Clean purple spinner active');
            }
        }

        // Global functions
        window.showSpinner = showSpinner;
        window.hideSpinner = hideSpinner;

        // Auto-hide on page unload
        window.addEventListener('beforeunload', hideSpinner);
        window.addEventListener('pagehide', hideSpinner);

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🟣 Purple spinner system ready');
        });

        console.log('✅ PURPLE SPINNER SYSTEM LOADED');
    </script>

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>