@model Website.ViewModels.UsersViewModel

@{
    ViewData["Title"] = "Users";
    var userType = ViewData["UserType"]?.ToString() ?? "Coach";
}

@section Styles {
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/dataTables.bootstrap5.min.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/responsive/2.2.9/css/responsive.bootstrap5.min.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/buttons/2.2.2/css/buttons.bootstrap5.min.css">

    <style>
        :root {
            --primary-color: #FF6B00;
            --secondary-color: #1C2C5B;
            --accent-color: #3BACB6;
            --light-color: #F8F9FA;
            --dark-color: #212529;
        }

        .dashboard-header {
            background: linear-gradient(135deg, var(--secondary-color) 0%, #0b1733 100%);
            color: white;
            padding: 2rem 0;
            margin-bottom: 2rem;
        }

        .back-button {
            margin-bottom: 20px;
        }

        .modal-content {
            border-radius: 15px;
            overflow: hidden;
        }

        .modal-header {
            background-color: var(--secondary-color);
            color: white;
            border-bottom: none;
        }

        .modal-footer {
            border-top: none;
        }

        .date-picker, .time-picker {
            border-radius: 50px;
            border: 1px solid #e9ecef;
            padding: 0.375rem 1rem;
        }

        .badge-pill {
            border-radius: 20px;
            padding: 0.35em 0.65em;
            font-size: 0.75em;
            font-weight: 600;
        }

        .btn-orange {
            background-color: var(--primary-color);
            color: white;
        }

            .btn-orange:hover {
                background-color: #e05e00;
                color: white;
            }

        .btn-navy {
            background-color: var(--secondary-color);
            color: white;
        }

            .btn-navy:hover {
                background-color: #162249;
                color: white;
            }

        /* DataTable Customization */
        .dataTables_wrapper .dataTables_filter input {
            border-radius: 50px;
            border: 1px solid #e9ecef;
            padding: 0.375rem 1rem;
            margin-left: 0.5em;
        }

        .dataTables_wrapper .dataTables_length select {
            border-radius: 50px;
            border: 1px solid #e9ecef;
            padding: 0.375rem 1rem;
        }

        .dataTables_wrapper .dt-buttons .btn {
            border-radius: 50px;
        }

        .dataTables_wrapper .dataTables_paginate .paginate_button {
            border-radius: 50px;
        }

            .dataTables_wrapper .dataTables_paginate .paginate_button.current {
                background: var(--primary-color);
                color: white !important;
                border: 1px solid var(--primary-color);
            }

                .dataTables_wrapper .dataTables_paginate .paginate_button.current:hover {
                    background: #e05e00;
                    color: white !important;
                    border: 1px solid #e05e00;
                }

        .table-actions {
            display: flex;
            gap: 5px;
            justify-content: center;
        }

        .action-icon {
            cursor: pointer;
            padding: 5px;
            border-radius: 5px;
        }

            .action-icon:hover {
                background-color: rgba(0, 0, 0, 0.05);
            }

        .progress-sm {
            height: 6px;
            border-radius: 3px;
        }

        .host-avatar {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            background-color: var(--secondary-color);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 0.7rem;
            margin-right: 0.5rem;
        }

        .host-container {
            display: flex;
            align-items: center;
        }

        .capacity-container {
            display: flex;
            align-items: center;
            flex-direction: column;
        }

        .capacity-text {
            font-size: 0.8rem;
            margin-bottom: 3px;
        }

        table.dataTable {
            border-collapse: collapse !important;
        }

        .table-striped > tbody > tr:nth-of-type(odd) > * {
            --bs-table-accent-bg: rgba(28, 44, 91, 0.03);
        }

        .no-runs-message {
            text-align: center;
            padding: 3rem;
            background-color: #f8f9fa;
            border-radius: 15px;
            margin: 2rem 0;
        }

        /* Scouting Report styles */
        .form-range::-webkit-slider-thumb {
            background: var(--primary-color);
        }

        .form-range::-moz-range-thumb {
            background: var(--primary-color);
        }

        .form-range::-ms-thumb {
            background: var(--primary-color);
        }

        /* Toast container */
        .toast-container {
            z-index: 9999;
        }
    </style>
}

<div class="dashboard-header">
    <div class="container">
        <h1>Users</h1>
        <p class="lead">Manage users, view profiles, and evaluate players</p>
    </div>
</div>

<div class="container">
    <!-- Back button to dashboard -->
    <div class="back-button">
        <a href="@Url.Action("Dashboard", "Dashboard")" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left me-2"></i>Back to Dashboard
        </a>
    </div>

    <!-- User Filters -->
    <div class="mb-4">
        <div class="card shadow-sm">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h5 class="mb-0">Filter Users</h5>
                    <button class="btn btn-sm btn-outline-secondary" id="resetFilters">
                        <i class="bi bi-arrow-counterclockwise me-1"></i>
                        Reset Filters
                    </button>
                </div>

                <div class="row g-3">
                    <div class="col-md-4">
                        <label for="statusFilter" class="form-label">Status</label>
                        <select class="form-select" id="statusFilter">
                            <option value="all" selected>All Statuses</option>
                            <option value="active">Active</option>
                            <option value="inactive">Inactive</option>
                            <option value="pending">Pending</option>
                        </select>
                    </div>

                    <div class="col-md-4">
                        <label for="roleFilter" class="form-label">Role</label>
                        <select class="form-select" id="roleFilter">
                            <option value="all" selected>All Roles</option>
                            <option value="admin">Admin</option>
                            <option value="client">Client</option>
                            <option value="coach">Coach</option>
                            <option value="player">Player</option>
                        </select>
                    </div>

                    <div class="col-md-4">
                        <label for="signupDateFilter" class="form-label">Signup Date</label>
                        <select class="form-select" id="signupDateFilter">
                            <option value="all" selected>All Time</option>
                            <option value="today">Today</option>
                            <option value="this-week">This Week</option>
                            <option value="this-month">This Month</option>
                            <option value="this-year">This Year</option>
                        </select>
                    </div>
                </div>

                <div class="mt-3" id="activeFilters">
                    <span class="badge bg-secondary me-2">Active Filters:</span>
                    <span class="text-muted filter-none">None</span>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-12 text-end">
            <button type="button" class="btn btn-orange" data-bs-toggle="modal" data-bs-target="#addUserModal">
                <i class="bi bi-plus-circle me-2"></i>Add User
            </button>
        </div>
    </div>

    <!-- DataTable -->
    @if (Model?.Users != null && Model.Users.Any())
    {
        <div class="card shadow-sm">
            <div class="card-body">
                <table id="usersTable" class="table table-striped table-hover w-100">
                    <thead>
                        <tr>
                            <th>Username</th>
                            <th>Sign Up Date</th>
                            <th>Status</th>
                            <th>Role</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in Model.Users)
                        {
                            <tr data-status="active">
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="rounded-circle bg-navy text-white d-flex align-items-center justify-content-center me-2" style="width: 36px; height: 36px;">
                                            @if (!string.IsNullOrEmpty(user.User.FirstName) && !string.IsNullOrEmpty(user.User.LastName))
                                            {
                                                <span>@(user.User.FirstName[0])@(user.User.LastName[0])</span>
                                            }
                                            else
                                            {
                                                <span>@(user.Profile.UserName?.Substring(0, 1) ?? "U")</span>
                                            }
                                        </div>
                                        <div>
                                            <div class="fw-semibold">@user.Profile.UserName</div>
                                            <div class="text-muted small">@(user.User.FirstName) @(user.User.LastName)</div>
                                        </div>
                                    </div>
                                </td>
                                <td>@(user.User.SignUpDate?.ToString("MM/dd/yyyy") ?? "N/A")</td>
                                <td>
                                    <span class="badge bg-success badge-pill">Active</span>
                                </td>
                                <td>@(user.User.AccessLevel ?? "User")</td>
                                <td>
                                    <div class="table-actions">
                                        <button type="button" class="btn btn-sm btn-outline-primary action-icon" data-bs-toggle="modal" data-bs-target="#editUserModal" data-user-id="@user.User.UserId" title="Edit">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        <a href="@Url.Action("Details", "User", new { id = user.User.UserId })" class="btn btn-sm btn-primary action-icon" title="View Profile">
                                            <i class="bi bi-eye"></i>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else
    {
        <div class="no-runs-message">
            <i class="bi bi-people" style="font-size: 3rem; color: var(--secondary-color);"></i>
            <h3 class="mt-3">No Users Found</h3>
            <p class="text-muted">There are no users available at the moment. Add a new user to get started!</p>
            <button type="button" class="btn btn-orange mt-3" data-bs-toggle="modal" data-bs-target="#addUserModal">
                <i class="bi bi-plus-circle me-2"></i>Add User
            </button>
        </div>
    }
</div>

<!-- Add User Modal -->
<div class="modal fade" id="addUserModal" tabindex="-1" aria-labelledby="addUserModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addUserModalLabel">Add New User</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="addUserForm" method="post" action="@Url.Action("Create", "User")">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="firstName" class="form-label">First Name</label>
                            <input type="text" class="form-control" id="firstName" name="FirstName" required>
                        </div>
                        <div class="col-md-6">
                            <label for="lastName" class="form-label">Last Name</label>
                            <input type="text" class="form-control" id="lastName" name="LastName" required>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="email" class="form-label">Email</label>
                            <input type="email" class="form-control" id="email" name="Email" required>
                        </div>
                        <div class="col-md-6">
                            <label for="phoneNumber" class="form-label">Phone Number</label>
                            <input type="tel" class="form-control" id="phoneNumber" name="PhoneNumber">
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-12">
                            <label for="address" class="form-label">Address</label>
                            <input type="text" class="form-control" id="address" name="Address">
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="city" class="form-label">City</label>
                            <input type="text" class="form-control" id="city" name="City">
                        </div>
                        <div class="col-md-4">
                            <label for="state" class="form-label">State</label>
                            <input type="text" class="form-control" id="state" name="State">
                        </div>
                        <div class="col-md-4">
                            <label for="zip" class="form-label">Zip Code</label>
                            <input type="text" class="form-control" id="zip" name="Zip">
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="userRole" class="form-label">User Role</label>
                            <select class="form-select" id="userRole" name="AccessLevel" required>
                                <option value="Client">Client</option>
                                <option value="Admin">Admin</option>
                                <option value="Coach">Coach</option>
                                <option value="Player">Player</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="password" class="form-label">Password</label>
                            <input type="password" class="form-control" id="password" name="Password" required>
                            <div class="form-text">Minimum 6 characters, at least one number and one letter.</div>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-12">
                            <label for="notes" class="form-label">Notes</label>
                            <textarea class="form-control" id="notes" name="Notes" rows="3"></textarea>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-orange">Add User</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit User Modal -->
<div class="modal fade" id="editUserModal" tabindex="-1" aria-labelledby="editUserModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editUserModalLabel">Edit User</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <ul class="nav nav-tabs" id="editUserTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="profile-details-tab" data-bs-toggle="tab" data-bs-target="#profile-details-tab-pane" type="button" role="tab" aria-controls="profile-details-tab-pane" aria-selected="true">User Details</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="scouting-tab" data-bs-toggle="tab" data-bs-target="#scouting-tab-pane" type="button" role="tab" aria-controls="scouting-tab-pane" aria-selected="false">Scouting Report</button>
                    </li>
                </ul>
                <div class="tab-content" id="editUserTabContent">
                    <!-- User Details Tab -->
                    <div class="tab-pane fade show active" id="profile-details-tab-pane" role="tabpanel" aria-labelledby="profile-details-tab" tabindex="0">
                        <form id="editUserForm" method="post" action="@Url.Action("Edit", "User")" class="mt-4">
                            @Html.AntiForgeryToken()
                            <input type="hidden" id="editUserId" name="UserId" value="" />

                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="editFirstName" class="form-label">First Name</label>
                                    <input type="text" class="form-control" id="editFirstName" name="FirstName" required>
                                </div>
                                <div class="col-md-6">
                                    <label for="editLastName" class="form-label">Last Name</label>
                                    <input type="text" class="form-control" id="editLastName" name="LastName" required>
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="editEmail" class="form-label">Email</label>
                                    <input type="email" class="form-control" id="editEmail" name="Email" required>
                                </div>
                                <div class="col-md-6">
                                    <label for="editPhoneNumber" class="form-label">Phone Number</label>
                                    <input type="tel" class="form-control" id="editPhoneNumber" name="PhoneNumber">
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-12">
                                    <label for="editAddress" class="form-label">Address</label>
                                    <input type="text" class="form-control" id="editAddress" name="Address">
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-4">
                                    <label for="editCity" class="form-label">City</label>
                                    <input type="text" class="form-control" id="editCity" name="City">
                                </div>
                                <div class="col-md-4">
                                    <label for="editState" class="form-label">State</label>
                                    <input type="text" class="form-control" id="editState" name="State">
                                </div>
                                <div class="col-md-4">
                                    <label for="editZip" class="form-label">Zip Code</label>
                                    <input type="text" class="form-control" id="editZip" name="Zip">
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="editUserRole" class="form-label">User Role</label>
                                    <select class="form-select" id="editUserRole" name="AccessLevel">
                                        <option value="Client">Client</option>
                                        <option value="Admin">Admin</option>
                                        <option value="Coach">Coach</option>
                                        <option value="Player">Player</option>
                                    </select>
                                </div>
                                <div class="col-md-6">
                                    <label for="editUserStatus" class="form-label">Status</label>
                                    <select class="form-select" id="editUserStatus" name="Status">
                                        <option value="Active">Active</option>
                                        <option value="Inactive">Inactive</option>
                                        <option value="Pending">Pending</option>
                                    </select>
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-12">
                                    <label for="editNotes" class="form-label">Notes</label>
                                    <textarea class="form-control" id="editNotes" name="Notes" rows="3"></textarea>
                                </div>
                            </div>

                            <div class="modal-footer">
                                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-danger me-auto" id="deleteUserBtn">Delete User</button>
                                <button type="submit" class="btn btn-orange">Save Changes</button>
                            </div>
                        </form>
                    </div>

                    <!-- Scouting Report Tab -->
                    <div class="tab-pane fade" id="scouting-tab-pane" role="tabpanel" aria-labelledby="scouting-tab" tabindex="0">
                        <div class="mt-4">
                            <h6 class="mb-3">Player Scouting Report</h6>
                            <form id="editScoutingForm" method="post" action="@Url.Action("UpdateScoutingReport", "User")">
                                @Html.AntiForgeryToken()
                                <input type="hidden" id="scoutingUserId" name="UserId" value="" />
                                <input type="hidden" id="scoutingReportId" name="ScoutingReportId" value="" />

                                <!-- Player Metrics -->
                                <div class="row mb-4">
                                    <div class="col-md-12 mb-3">
                                        <h6 class="text-navy">Player Metrics</h6>
                                        <hr>
                                    </div>
                                    <div class="col-md-3 mb-3">
                                        <label for="height" class="form-label">Height (in)</label>
                                        <input type="number" class="form-control" id="height" name="Height" min="36" max="96" step="0.5">
                                    </div>
                                    <div class="col-md-3 mb-3">
                                        <label for="weight" class="form-label">Weight (lbs)</label>
                                        <input type="number" class="form-control" id="weight" name="Weight" min="50" max="400">
                                    </div>
                                    <div class="col-md-3 mb-3">
                                        <label for="wingspan" class="form-label">Wingspan (in)</label>
                                        <input type="number" class="form-control" id="wingspan" name="Wingspan" min="36" max="96" step="0.5">
                                    </div>
                                    <div class="col-md-3 mb-3">
                                        <label for="verticalJump" class="form-label">Vertical Jump (in)</label>
                                        <input type="number" class="form-control" id="verticalJump" name="VerticalJump" min="0" max="60" step="0.5">
                                    </div>
                                </div>

                                <!-- Skill Ratings -->
                                <div class="row mb-4">
                                    <div class="col-md-12 mb-3">
                                        <h6 class="text-navy">Skill Ratings (1-10)</h6>
                                        <hr>
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="shooting" class="form-label">Shooting</label>
                                        <input type="range" class="form-range" id="shooting" name="Shooting" min="1" max="10" step="1" value="5" oninput="document.getElementById('shootingValue').textContent=this.value">
                                        <div class="d-flex justify-content-between">
                                            <span class="small text-muted">Beginner (1)</span>
                                            <span class="small text-primary fw-bold" id="shootingValue">5</span>
                                            <span class="small text-muted">Elite (10)</span>
                                        </div>
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="ballHandling" class="form-label">Ball Handling</label>
                                        <input type="range" class="form-range" id="ballHandling" name="BallHandling" min="1" max="10" step="1" value="5" oninput="document.getElementById('ballHandlingValue').textContent=this.value">
                                        <div class="d-flex justify-content-between">
                                            <span class="small text-muted">Beginner (1)</span>
                                            <span class="small text-primary fw-bold" id="ballHandlingValue">5</span>
                                            <span class="small text-muted">Elite (10)</span>
                                        </div>
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="passing" class="form-label">Passing</label>
                                        <input type="range" class="form-range" id="passing" name="Passing" min="1" max="10" step="1" value="5" oninput="document.getElementById('passingValue').textContent=this.value">
                                        <div class="d-flex justify-content-between">
                                            <span class="small text-muted">Beginner (1)</span>
                                            <span class="small text-primary fw-bold" id="passingValue">5</span>
                                            <span class="small text-muted">Elite (10)</span>
                                        </div>
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="defense" class="form-label">Defense</label>
                                        <input type="range" class="form-range" id="defense" name="Defense" min="1" max="10" step="1" value="5" oninput="document.getElementById('defenseValue').textContent=this.value">
                                        <div class="d-flex justify-content-between">
                                            <span class="small text-muted">Beginner (1)</span>
                                            <span class="small text-primary fw-bold" id="defenseValue">5</span>
                                            <span class="small text-muted">Elite (10)</span>
                                        </div>
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="rebounding" class="form-label">Rebounding</label>
                                        <input type="range" class="form-range" id="rebounding" name="Rebounding" min="1" max="10" step="1" value="5" oninput="document.getElementById('reboundingValue').textContent=this.value">
                                        <div class="d-flex justify-content-between">
                                            <span class="small text-muted">Beginner (1)</span>
                                            <span class="small text-primary fw-bold" id="reboundingValue">5</span>
                                            <span class="small text-muted">Elite (10)</span>
                                        </div>
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="athleticism" class="form-label">Athleticism</label>
                                        <input type="range" class="form-range" id="athleticism" name="Athleticism" min="1" max="10" step="1" value="5" oninput="document.getElementById('athleticismValue').textContent=this.value">
                                        <div class="d-flex justify-content-between">
                                            <span class="small text-muted">Beginner (1)</span>
                                            <span class="small text-primary fw-bold" id="athleticismValue">5</span>
                                            <span class="small text-muted">Elite (10)</span>
                                        </div>
                                    </div>
                                </div>

                                <!-- Player Profile -->
                                <div class="row mb-4">
                                    <div class="col-md-12 mb-3">
                                        <h6 class="text-navy">Player Profile</h6>
                                        <hr>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label for="primaryPosition" class="form-label">Primary Position</label>
                                        <select class="form-select" id="primaryPosition" name="PrimaryPosition">
                                            <option value="">Select position...</option>
                                            <option value="PG">Point Guard (PG)</option>
                                            <option value="SG">Shooting Guard (SG)</option>
                                            <option value="SF">Small Forward (SF)</option>
                                            <option value="PF">Power Forward (PF)</option>
                                            <option value="C">Center (C)</option>
                                        </select>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label for="secondaryPosition" class="form-label">Secondary Position</label>
                                        <select class="form-select" id="secondaryPosition" name="SecondaryPosition">
                                            <option value="">Select position...</option>
                                            <option value="PG">Point Guard (PG)</option>
                                            <option value="SG">Shooting Guard (SG)</option>
                                            <option value="SF">Small Forward (SF)</option>
                                            <option value="PF">Power Forward (PF)</option>
                                            <option value="C">Center (C)</option>
                                            <option value="None">None</option>
                                        </select>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label for="playingStyle" class="form-label">Playing Style</label>
                                        <select class="form-select" id="playingStyle" name="PlayingStyle">
                                            <option value="">Select style...</option>
                                            <option value="Shooter">Shooter</option>
                                            <option value="Slasher">Slasher</option>
                                            <option value="Playmaker">Playmaker</option>
                                            <option value="Defender">Defender</option>
                                            <option value="Post Player">Post Player</option>
                                            <option value="All-Around">All-Around</option>
                                        </select>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label for="experienceLevel" class="form-label">Experience Level</label>
                                        <select class="form-select" id="experienceLevel" name="ExperienceLevel">
                                            <option value="">Select level...</option>
                                            <option value="Beginner">Beginner</option>
                                            <option value="Intermediate">Intermediate</option>
                                            <option value="Advanced">Advanced</option>
                                            <option value="Elite">Elite</option>
                                            <option value="Professional">Professional</option>
                                        </select>
                                    </div>
                                </div>

                                <!-- Scouting Notes -->
                                <div class="row mb-4">
                                    <div class="col-md-12 mb-3">
                                        <h6 class="text-navy">Scouting Notes</h6>
                                        <hr>
                                    </div>
                                    <div class="col-md-12 mb-3">
                                        <label for="strengths" class="form-label">Strengths</label>
                                        <textarea class="form-control" id="strengths" name="Strengths" rows="3" placeholder="Player's key strengths and positive attributes..."></textarea>
                                    </div>
                                    <div class="col-md-12 mb-3">
                                        <label for="weaknesses" class="form-label">Areas for Improvement</label>
                                        <textarea class="form-control" id="weaknesses" name="Weaknesses" rows="3" placeholder="Skills or areas that need development..."></textarea>
                                    </div>
                                    <div class="col-md-12 mb-3">
                                        <label for="scoutingNotes" class="form-label">Additional Notes</label>
                                        <textarea class="form-control" id="scoutingNotes" name="ScoutingNotes" rows="3" placeholder="Other observations, player tendencies, coaching suggestions..."></textarea>
                                    </div>
                                </div>

                                <!-- Evaluation Metadata (if exists) -->
                                <div id="evaluationMetadata" class="row mb-4" style="display: none;">
                                    <div class="col-md-12">
                                        <div class="alert alert-info">
                                            <div class="d-flex align-items-center">
                                                <i class="bi bi-info-circle me-2"></i>
                                                <div>
                                                    <small>Evaluation by <span id="evaluatedBy">-</span> on <span id="evaluationDate">-</span></small>
                                                    <br>
                                                    <small>Last updated: <span id="lastUpdated">-</span></small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="modal-footer">
                                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                                    <button type="submit" class="btn btn-orange">Save Scouting Report</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete User Confirmation Modal -->
<div class="modal fade" id="deleteUserModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Deletion</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this user? This action cannot be undone.</p>
                <p class="text-danger"><strong>Note:</strong> All related data for this user will be permanently deleted.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                <form id="deleteUserForm" method="post" action="@Url.Action("Delete", "User")">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="deleteUserId" name="id" value="" />
                    <button type="submit" class="btn btn-danger">Delete User</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Toast Container for Notifications -->
<div class="toast-container position-fixed bottom-0 end-0 p-3"></div>

@section Scripts {
    <script type="text/javascript" src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/1.11.5/js/dataTables.bootstrap5.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/responsive/2.2.9/js/dataTables.responsive.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/responsive/2.2.9/js/responsive.bootstrap5.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/buttons/2.2.2/js/dataTables.buttons.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/buttons/2.2.2/js/buttons.bootstrap5.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/buttons/2.2.2/js/buttons.html5.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize DataTable
            const usersTable = $('#usersTable').DataTable({
                responsive: true,
                lengthMenu: [[10, 25, 50, -1], [10, 25, 50, "All"]],
                dom: '<"row"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6"f>>rtip',
                language: {
                    search: "_INPUT_",
                    searchPlaceholder: "Search users...",
                    lengthMenu: "Show _MENU_ users per page",
                    info: "Showing _START_ to _END_ of _TOTAL_ users",
                    infoEmpty: "Showing 0 to 0 of 0 users",
                    infoFiltered: "(filtered from _MAX_ total users)"
                },
                columnDefs: [
                    { className: "align-middle", targets: "_all" },
                    { orderable: false, targets: [4] } // Disable sorting on the Actions column
                ],
                order: [[1, 'asc']] // Sort by Sign Up Date column by default
            });

            // Filter references
            const statusFilter = $('#statusFilter');
            const roleFilter = $('#roleFilter');
            const signupDateFilter = $('#signupDateFilter');
            const resetFiltersBtn = $('#resetFilters');
            const activeFiltersContainer = $('#activeFilters');

            // Apply filter function
            function applyFilters() {
                // Remove any existing custom filter to prevent stacking
                if ($.fn.dataTable.ext.search.length > 0) {
                    $.fn.dataTable.ext.search.pop();
                }

                // Create a new custom filter function
                $.fn.dataTable.ext.search.push(function(settings, data, dataIndex) {
                    // Only apply this filter to our usersTable
                    if (settings.nTable.id !== 'usersTable') return true;

                    // Skip filtering if all filters are set to 'all'
                    if (statusFilter.val() === 'all' &&
                        roleFilter.val() === 'all' &&
                        signupDateFilter.val() === 'all') {
                        return true;
                    }

                    // Status filtering (column 2 contains the status badge)
                    if (statusFilter.val() !== 'all') {
                        const status = data[2].toLowerCase();
                        const statusValue = statusFilter.val().toLowerCase();

                        if (!status.includes(statusValue)) {
                            return false;
                        }
                    }

                    // Role filtering (column 3 contains the role)
                    if (roleFilter.val() !== 'all') {
                        const role = data[3].toLowerCase();
                        const roleValue = roleFilter.val().toLowerCase();

                        if (!role.includes(roleValue)) {
                            return false;
                        }
                    }

                    // Signup date filtering (column 1 contains the date)
                    if (signupDateFilter.val() !== 'all') {
                        const dateString = data[1];
                        const date = new Date(dateString);
                        const today = new Date();
                        today.setHours(0, 0, 0, 0); // Set to start of today

                        const startOfWeek = new Date(today);
                        startOfWeek.setDate(today.getDate() - today.getDay()); // Sunday

                        const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
                        const startOfYear = new Date(today.getFullYear(), 0, 1);

                        switch (signupDateFilter.val()) {
                            case 'today':
                                if (date < today) {
                                    return false;
                                }
                                break;
                            case 'this-week':
                                if (date < startOfWeek) {
                                    return false;
                                }
                                break;
                            case 'this-month':
                                if (date < startOfMonth) {
                                    return false;
                                }
                                break;
                            case 'this-year':
                                if (date < startOfYear) {
                                    return false;
                                }
                                break;
                        }
                    }

                    // If we got here, the row passes all filters
                    return true;
                });

                // Redraw the table to apply filters
                usersTable.draw();

                // Update the active filters display
                updateActiveFilters();
            }

            // Update the active filters display
            function updateActiveFilters() {
                // Clear the current active filters display (except the label)
                activeFiltersContainer.find('.filter-badge, .filter-none').remove();

                // Check if any filters are active
                const hasActiveFilters =
                    statusFilter.val() !== 'all' ||
                    roleFilter.val() !== 'all' ||
                    signupDateFilter.val() !== 'all';

                // If no filters are active, show "None"
                if (!hasActiveFilters) {
                    activeFiltersContainer.append(
                        $('<span>').addClass('text-muted filter-none').text('None')
                    );
                    return;
                }

                // Add badges for active filters
                if (statusFilter.val() !== 'all') {
                    addFilterBadge('Status', formatFilterValue(statusFilter.val()), function() {
                        statusFilter.val('all');
                        applyFilters();
                    });
                }

                if (roleFilter.val() !== 'all') {
                    addFilterBadge('Role', formatFilterValue(roleFilter.val()), function() {
                        roleFilter.val('all');
                        applyFilters();
                    });
                }

                if (signupDateFilter.val() !== 'all') {
                    addFilterBadge('Signup Date', formatFilterValue(signupDateFilter.val()), function() {
                        signupDateFilter.val('all');
                        applyFilters();
                    });
                }
            }

            // Helper function to format filter values for display
            function formatFilterValue(value) {
                return value
                    .split('-')
                    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
                    .join(' ');
            }

            // Add a filter badge to the display
            function addFilterBadge(label, value, removeCallback) {
                const badge = $('<span>')
                    .addClass('badge bg-primary me-2 filter-badge')
                    .text(`${label}: ${value}`);

                const removeBtn = $('<button>')
                    .addClass('btn-close btn-close-white ms-1')
                    .css('font-size', '0.5rem')
                    .on('click', removeCallback);

                badge.append(removeBtn);
                activeFiltersContainer.append(badge);
            }

            // Add event listeners to filters
            statusFilter.on('change', applyFilters);
            roleFilter.on('change', applyFilters);
            signupDateFilter.on('change', applyFilters);

            // Reset filters button
            resetFiltersBtn.on('click', function() {
                statusFilter.val('all');
                roleFilter.val('all');
                signupDateFilter.val('all');
                applyFilters();
            });

            // Initialize with current filter values
            applyFilters();

            // Handle edit user modal
            const editUserModal = document.getElementById('editUserModal');
            if (editUserModal) {
                editUserModal.addEventListener('show.bs.modal', function(event) {
                    const button = event.relatedTarget;
                    const userId = button.getAttribute('data-user-id');

                    // Set user ID in the user details form
                    document.getElementById('editUserId').value = userId;

                    // Set user ID in the scouting report form
                    document.getElementById('scoutingUserId').value = userId;

                    // Load user data
                    loadUserData(userId);

                    // Load scouting report data
                    loadScoutingReport(userId);

                    // Set delete button user ID
                    document.getElementById('deleteUserId').value = userId;
                });
            }

            // Handle delete user button
            const deleteUserBtn = document.getElementById('deleteUserBtn');
            if (deleteUserBtn) {
                deleteUserBtn.addEventListener('click', function() {
                    const userId = document.getElementById('editUserId').value;
                    document.getElementById('deleteUserId').value = userId;

                    // Hide edit modal and show delete confirmation modal
                    const editModal = bootstrap.Modal.getInstance(document.getElementById('editUserModal'));
                    editModal.hide();

                    const deleteModal = new bootstrap.Modal(document.getElementById('deleteUserModal'));
                    deleteModal.show();
                });
            }

            // Function to load user data
            function loadUserData(userId) {
                fetch(`@Url.Action("GetUserData", "User")?id=${userId}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            // Populate form fields
                            document.getElementById('editFirstName').value = data.user.firstName || '';
                            document.getElementById('editLastName').value = data.user.lastName || '';
                            document.getElementById('editEmail').value = data.user.email || '';
                            document.getElementById('editPhoneNumber').value = data.user.phoneNumber || '';
                            document.getElementById('editAddress').value = data.user.address || '';
                            document.getElementById('editCity').value = data.user.city || '';
                            document.getElementById('editState').value = data.user.state || '';
                            document.getElementById('editZip').value = data.user.zip || '';

                            // Select values
                            const userRoleSelect = document.getElementById('editUserRole');
                            if (userRoleSelect && data.user.accessLevel) {
                                for (let i = 0; i < userRoleSelect.options.length; i++) {
                                    if (userRoleSelect.options[i].value === data.user.accessLevel) {
                                        userRoleSelect.selectedIndex = i;
                                        break;
                                    }
                                }
                            }

                            const statusSelect = document.getElementById('editUserStatus');
                            if (statusSelect && data.user.status) {
                                for (let i = 0; i < statusSelect.options.length; i++) {
                                    if (statusSelect.options[i].value === data.user.status) {
                                        statusSelect.selectedIndex = i;
                                        break;
                                    }
                                }
                            }

                            // Additional fields
                            document.getElementById('editNotes').value = data.user.notes || '';
                        } else {
                            console.error('Error loading user data:', data.message);
                            showToast('Error', 'Failed to load user data. Please try again.', 'danger');
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching user data:', error);
                        showToast('Error', 'Failed to load user data. Please try again.', 'danger');
                    });
            }

            // Function to load scouting report data
            function loadScoutingReport(userId) {
                fetch(`@Url.Action("GetScoutingReport", "User")?id=${userId}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            const report = data.scoutingReport;

                            // Set the scouting report ID if it exists
                            document.getElementById('scoutingReportId').value = report.scoutingReportId || '';

                            // Player Metrics
                            document.getElementById('height').value = report.height || '';
                            document.getElementById('weight').value = report.weight || '';
                            document.getElementById('wingspan').value = report.wingspan || '';
                            document.getElementById('verticalJump').value = report.verticalJump || '';

                            // Skill Ratings
                            const setSkillValue = (id, value) => {
                                const slider = document.getElementById(id);
                                const valueDisplay = document.getElementById(`${id}Value`);
                                if (slider && valueDisplay) {
                                    slider.value = value || 5;
                                    valueDisplay.textContent = value || 5;
                                }
                            };

                            setSkillValue('shooting', report.shooting);
                            setSkillValue('ballHandling', report.ballHandling);
                            setSkillValue('passing', report.passing);
                            setSkillValue('defense', report.defense);
                            setSkillValue('rebounding', report.rebounding);
                            setSkillValue('athleticism', report.athleticism);

                            // Player Profile
                            const setSelectValue = (id, value) => {
                                const select = document.getElementById(id);
                                if (select && value) {
                                    for (let i = 0; i < select.options.length; i++) {
                                        if (select.options[i].value === value) {
                                            select.selectedIndex = i;
                                            break;
                                        }
                                    }
                                }
                            };

                            setSelectValue('primaryPosition', report.primaryPosition);
                            setSelectValue('secondaryPosition', report.secondaryPosition);
                            setSelectValue('playingStyle', report.playingStyle);
                            setSelectValue('experienceLevel', report.experienceLevel);

                            // Scouting Notes
                            document.getElementById('strengths').value = report.strengths || '';
                            document.getElementById('weaknesses').value = report.weaknesses || '';
                            document.getElementById('scoutingNotes').value = report.scoutingNotes || '';

                            // Evaluation Metadata
                            const metadataSection = document.getElementById('evaluationMetadata');
                            if (report.scoutingReportId) {
                                // Show metadata if report exists
                                metadataSection.style.display = 'flex';

                                // Format dates
                                const formatDate = (dateString) => {
                                    if (!dateString) return '-';
                                    const date = new Date(dateString);
                                    return date.toLocaleDateString('en-US', {
                                        year: 'numeric',
                                        month: 'short',
                                        day: 'numeric',
                                        hour: '2-digit',
                                        minute: '2-digit'
                                    });
                                };

                                document.getElementById('evaluatedBy').textContent = report.evaluatedBy || '-';
                                document.getElementById('evaluationDate').textContent = formatDate(report.evaluationDate);
                                document.getElementById('lastUpdated').textContent = formatDate(report.lastUpdated);
                            } else {
                                // Hide metadata for new reports
                                metadataSection.style.display = 'none';
                            }
                        } else {
                            console.error('Error loading scouting report:', data.message);
                            // Reset form
                            document.getElementById('editScoutingForm').reset();
                            document.getElementById('evaluationMetadata').style.display = 'none';
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching scouting report:', error);
                        // Reset form
                        document.getElementById('editScoutingForm').reset();
                        document.getElementById('evaluationMetadata').style.display = 'none';
                    });
            }

            // Helper function to show toast notifications
            function showToast(title, message, type = 'success') {
                // Check if toast container exists, create if not
                let toastContainer = document.querySelector('.toast-container');
                if (!toastContainer) {
                    toastContainer = document.createElement('div');
                    toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
                    document.body.appendChild(toastContainer);
                }

                // Create toast element
                const toastId = 'toast-' + Date.now();
                const toastHtml = `
                    <div id="${toastId}" class="toast align-items-center text-white bg-${type} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                        <div class="d-flex">
                            <div class="toast-body">
                                <strong>${title}</strong>: ${message}
                            </div>
                            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                    </div>
                `;

                // Add toast to container
                toastContainer.insertAdjacentHTML('beforeend', toastHtml);

                // Initialize and show toast
                const toastElement = document.getElementById(toastId);
                const toast = new bootstrap.Toast(toastElement, { autohide: true, delay: 5000 });
                toast.show();

                // Remove toast after hiding
                toastElement.addEventListener('hidden.bs.toast', function() {
                    toastElement.remove();
                });
            }

            // AJAX form submission for the scouting report
            document.getElementById('editScoutingForm').addEventListener('submit', function(e) {
                e.preventDefault();

                // Get form data
                const formData = new FormData(this);
                const scoutingReport = {};

                // Convert FormData to object
                for (const [key, value] of formData.entries()) {
                    scoutingReport[key] = value;
                }

                // Send AJAX request
                fetch('@Url.Action("SaveScoutingReportAjax", "User")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(scoutingReport)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Show success message
                        showToast('Success', data.message);

                        // Update the scouting report ID if it's a new report
                        document.getElementById('scoutingReportId').value = data.scoutingReport.scoutingReportId;

                        // Update metadata
                        const metadataSection = document.getElementById('evaluationMetadata');
                        metadataSection.style.display = 'flex';

                        const formatDate = (dateString) => {
                            if (!dateString) return '-';
                            const date = new Date(dateString);
                            return date.toLocaleDateString('en-US', {
                                year: 'numeric',
                                month: 'short',
                                day: 'numeric',
                                hour: '2-digit',
                                minute: '2-digit'
                            });
                        };

                        document.getElementById('evaluatedBy').textContent = data.scoutingReport.evaluatedBy || '-';
                        document.getElementById('evaluationDate').textContent = formatDate(data.scoutingReport.evaluationDate);
                        document.getElementById('lastUpdated').textContent = formatDate(data.scoutingReport.lastUpdated);
                    } else {
                        // Show error message
                        showToast('Error', data.message, 'danger');
                    }
                })
                .catch(error => {
                    console.error('Error saving scouting report:', error);
                    showToast('Error', 'Failed to save scouting report. Please try again.', 'danger');
                });
            });
        });
    </script>
}